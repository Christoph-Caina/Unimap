/* card_order.h
   Generated by wsdl2h 1.2.16 from http://22.22.22.11:55600/stx_office.php?wsdl and typemap.dat
   2013-01-04 11:48:44 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on card_order.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:STxOfficeSoapXml                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:STxOfficeSoapXml"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:STxOfficeSoapXml"
//gsoap ns1   schema namespace:	urn:STxOfficeSoapXml
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:integer"
typedef std::string xsd__integer;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__ResponseStatusType.
class ns1__ResponseStatusType;

//  Forward declaration of class ns1__CardValueType.
class ns1__CardValueType;

//  Forward declaration of class ns1__GetKycCodeRequestType.
class ns1__GetKycCodeRequestType;

//  Forward declaration of class ns1__GetKycCodeResponseType.
class ns1__GetKycCodeResponseType;

//  Forward declaration of class ns1__UpdateKycStateRequestType.
class ns1__UpdateKycStateRequestType;

//  Forward declaration of class ns1__UpdateKycStateResponseType.
class ns1__UpdateKycStateResponseType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:STxOfficeSoapXml                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:STxOfficeSoapXml                                                     *
 *                                                                            *
\******************************************************************************/


/// "urn:STxOfficeSoapXml":ResponseStatusType is a complexType.
class ns1__ResponseStatusType
{ public:
/// Element ResponseResult of type xs:string.
    std::string                          ResponseResult                 1;	///< Required element.
/// Element ResponseCode of type xs:short.
    short                                ResponseCode                   1;	///< Required element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > ResponseMessage                0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:STxOfficeSoapXml":CardValueType is a complexType.
class ns1__CardValueType
{ public:
/// Element Amount of type xs:integer.
    xsd__integer                         Amount                         1;	///< Required element.
/// Element CurrencyCode of type xs:string.
    std::string                          CurrencyCode                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:STxOfficeSoapXml":GetKycCodeRequestType is a complexType.
class ns1__GetKycCodeRequestType
{ public:
/// Element CardSAN of type xs:string.
    std::string                          CardSAN                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:STxOfficeSoapXml":GetKycCodeResponseType is a complexType.
class ns1__GetKycCodeResponseType
{ public:
/// Element ResponseStatus of type "urn:STxOfficeSoapXml":ResponseStatusType.
    ns1__ResponseStatusType*             ResponseStatus                 1;	///< Required element.
/// Element kycPin of type xs:string.
    std::string                          kycPin                         1;	///< Required element.
/// Element kycPinState of type xs:string.
    std::string                          kycPinState                    1;	///< Required element.
/// Element kycPinFailedCount of type xs:string.
    std::string                          kycPinFailedCount              1;	///< Required element.
/// Element kycPin_confirm_source of type xs:string.
    std::string                          kycPin_USCOREconfirm_USCOREsource 1;	///< Required element.
/// Element kycPin_verified_user of type xs:string.
    std::string                          kycPin_USCOREverified_USCOREuser 1;	///< Required element.
/// Element kycPin_verify_datetime of type xs:string.
    std::string                          kycPin_USCOREverify_USCOREdatetime 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:STxOfficeSoapXml":UpdateKycStateRequestType is a complexType.
class ns1__UpdateKycStateRequestType
{ public:
/// Element CardSAN of type xs:string.
    std::string                          CardSAN                        1;	///< Required element.
/// Element kycCode of type xs:string.
    std::string                          kycCode                        1;	///< Required element.
/// Element kycState of type xs:string.
    std::string                          kycState                       1;	///< Required element.
/// Element updateUser of type xs:string.
    std::string                          updateUser                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:STxOfficeSoapXml":UpdateKycStateResponseType is a complexType.
class ns1__UpdateKycStateResponseType
{ public:
/// Element ResponseStatus of type "urn:STxOfficeSoapXml":ResponseStatusType.
    ns1__ResponseStatusType*             ResponseStatus                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:STxOfficeSoapXml                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:STxOfficeSoapXml                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	STxOfficeSoapXmlBinding 
//gsoap ns1  service type:	STxOfficeSoapXmlPort 
//gsoap ns1  service port:	http://22.22.22.11:55600/stx_office.php 
//gsoap ns1  service namespace:	urn:STxOfficeSoapXml 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage STxOfficeSoapXml Definitions

@section STxOfficeSoapXml_bindings Service Bindings
  - @ref STxOfficeSoapXmlBinding

@section STxOfficeSoapXml_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page STxOfficeSoapXmlBinding Binding "STxOfficeSoapXmlBinding"

@section STxOfficeSoapXmlService_service Service Documentation "STxOfficeSoapXmlService"
STx Office Soap Xml Handler

@section STxOfficeSoapXmlBinding_operations Operations of Binding  "STxOfficeSoapXmlBinding"
  - @ref __ns1__GetKycCodeRequest
  - @ref __ns1__UpdateKycStateRequest

@section STxOfficeSoapXmlBinding_ports Endpoints of Binding  "STxOfficeSoapXmlBinding"
  - http://22.22.22.11:55600/stx_office.php

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   STxOfficeSoapXmlBinding                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetKycCodeRequest                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetKycCodeRequest" of service binding "STxOfficeSoapXmlBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:STxOfficeSoapXml#GetKycCodeRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetKycCodeRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__GetKycCodeRequestType*         GetKycCodeRequest,
    // response parameters:
    ns1__GetKycCodeResponseType*        GetKycCodeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetKycCodeRequest(
    struct soap *soap,
    // request parameters:
    ns1__GetKycCodeRequestType*         GetKycCodeRequest,
    // response parameters:
    ns1__GetKycCodeResponseType*        GetKycCodeResponse
  );
@endcode

C++ proxy class (defined in soapSTxOfficeSoapXmlBindingProxy.h):
@code
  class STxOfficeSoapXmlBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSTxOfficeSoapXmlBindingService.h):
@code
  class STxOfficeSoapXmlBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetKycCodeRequest document
//gsoap ns1  service method-encoding:	GetKycCodeRequest literal
//gsoap ns1  service method-action:	GetKycCodeRequest urn:STxOfficeSoapXml#GetKycCodeRequest
int __ns1__GetKycCodeRequest(
    ns1__GetKycCodeRequestType*         GetKycCodeRequest,	///< Request parameter
    ns1__GetKycCodeResponseType*        GetKycCodeResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateKycStateRequest                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__UpdateKycStateRequest" of service binding "STxOfficeSoapXmlBinding"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="urn:STxOfficeSoapXml#UpdateKycStateRequest"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateKycStateRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__UpdateKycStateRequestType*     UpdateKycStateRequest,
    // response parameters:
    ns1__UpdateKycStateResponseType*    UpdateKycStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateKycStateRequest(
    struct soap *soap,
    // request parameters:
    ns1__UpdateKycStateRequestType*     UpdateKycStateRequest,
    // response parameters:
    ns1__UpdateKycStateResponseType*    UpdateKycStateResponse
  );
@endcode

C++ proxy class (defined in soapSTxOfficeSoapXmlBindingProxy.h):
@code
  class STxOfficeSoapXmlBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapSTxOfficeSoapXmlBindingService.h):
@code
  class STxOfficeSoapXmlBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	UpdateKycStateRequest document
//gsoap ns1  service method-encoding:	UpdateKycStateRequest literal
//gsoap ns1  service method-action:	UpdateKycStateRequest urn:STxOfficeSoapXml#UpdateKycStateRequest
int __ns1__UpdateKycStateRequest(
    ns1__UpdateKycStateRequestType*     UpdateKycStateRequest,	///< Request parameter
    ns1__UpdateKycStateResponseType*    UpdateKycStateResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "urn:STxOfficeSoapXml"

*/

/* End of card_order.h */
