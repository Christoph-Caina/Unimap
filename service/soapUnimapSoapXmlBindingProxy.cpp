/* soapUnimapSoapXmlBindingProxy.cpp
   Generated by gSOAP 2.7.16 from unimap_service.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapUnimapSoapXmlBindingProxy.h"

UnimapSoapXmlBindingProxy::UnimapSoapXmlBindingProxy()
{	UnimapSoapXmlBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

UnimapSoapXmlBindingProxy::UnimapSoapXmlBindingProxy(const struct soap &_soap) :soap(_soap)
{ }

UnimapSoapXmlBindingProxy::UnimapSoapXmlBindingProxy(soap_mode iomode)
{	UnimapSoapXmlBindingProxy_init(iomode, iomode);
}

UnimapSoapXmlBindingProxy::UnimapSoapXmlBindingProxy(soap_mode imode, soap_mode omode)
{	UnimapSoapXmlBindingProxy_init(imode, omode);
}

void UnimapSoapXmlBindingProxy::UnimapSoapXmlBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:UnimapSoapXml", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

UnimapSoapXmlBindingProxy::~UnimapSoapXmlBindingProxy()
{ }

void UnimapSoapXmlBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void UnimapSoapXmlBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *UnimapSoapXmlBindingProxy::soap_fault()
{	return this->fault;
}

const char *UnimapSoapXmlBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *UnimapSoapXmlBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int UnimapSoapXmlBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void UnimapSoapXmlBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void UnimapSoapXmlBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *UnimapSoapXmlBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int UnimapSoapXmlBindingProxy::ImageSolve(ns__ImageSolveRequestType *ns__ImageSolveRequest, ns__ImageSolveResponseType *ns__ImageSolveResponse)
{	struct soap *soap = this;
	struct __ns__ImageSolve soap_tmp___ns__ImageSolve;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:11011/unimap_service.cgi";
	soap_action = "urn:UnimapSoapXml/ImageSolve";
	soap->encodingStyle = NULL;
	soap_tmp___ns__ImageSolve.ns__ImageSolveRequest = ns__ImageSolveRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns__ImageSolve(soap, &soap_tmp___ns__ImageSolve);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns__ImageSolve(soap, &soap_tmp___ns__ImageSolve, "-ns:ImageSolve", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns__ImageSolve(soap, &soap_tmp___ns__ImageSolve, "-ns:ImageSolve", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns__ImageSolveResponse)
		return soap_closesock(soap);
	ns__ImageSolveResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns__ImageSolveResponse->soap_get(soap, "ns:ImageSolveResponse", "ns:ImageSolveResponseType");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UnimapSoapXmlBindingProxy::ScopePositionSet(ns__ScopePositionSetRequestType *input, ns__ScopePositionSetResponseType *result)
{	struct soap *soap = this;
	struct __ns__ScopePositionSet soap_tmp___ns__ScopePositionSet;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:11011/unimap_service.cgi";
	soap_action = "urn:UnimapSoapXml#ScopePositionSetRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns__ScopePositionSet.input = input;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns__ScopePositionSet(soap, &soap_tmp___ns__ScopePositionSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns__ScopePositionSet(soap, &soap_tmp___ns__ScopePositionSet, "-ns:ScopePositionSet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns__ScopePositionSet(soap, &soap_tmp___ns__ScopePositionSet, "-ns:ScopePositionSet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	result->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	result->soap_get(soap, "ns:ScopePositionSetResponseType", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UnimapSoapXmlBindingProxy::ScopePositionGet(ns__ScopePositionGetRequestType *input, ns__ScopePositionGetResponseType *result)
{	struct soap *soap = this;
	struct __ns__ScopePositionGet soap_tmp___ns__ScopePositionGet;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:11011/unimap_service.cgi";
	soap_action = "urn:UnimapSoapXml#ScopePositionGetRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns__ScopePositionGet.input = input;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns__ScopePositionGet(soap, &soap_tmp___ns__ScopePositionGet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns__ScopePositionGet(soap, &soap_tmp___ns__ScopePositionGet, "-ns:ScopePositionGet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns__ScopePositionGet(soap, &soap_tmp___ns__ScopePositionGet, "-ns:ScopePositionGet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	result->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	result->soap_get(soap, "ns:ScopePositionGetResponseType", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UnimapSoapXmlBindingProxy::CameraImageTake(ns__CameraImageTakeRequestType *input, ns__CameraImageTakeResponseType *result)
{	struct soap *soap = this;
	struct __ns__CameraImageTake soap_tmp___ns__CameraImageTake;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:11011/unimap_service.cgi";
	soap_action = "urn:UnimapSoapXml#CameraImageTakeRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns__CameraImageTake.input = input;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns__CameraImageTake(soap, &soap_tmp___ns__CameraImageTake);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns__CameraImageTake(soap, &soap_tmp___ns__CameraImageTake, "-ns:CameraImageTake", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns__CameraImageTake(soap, &soap_tmp___ns__CameraImageTake, "-ns:CameraImageTake", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	result->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	result->soap_get(soap, "ns:CameraImageTakeResponseType", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int UnimapSoapXmlBindingProxy::ScopeFocusAdjust(ns__ScopeFocusAdjustRequestType *input, ns__ScopeFocusAdjustResponseType *result)
{	struct soap *soap = this;
	struct __ns__ScopeFocusAdjust soap_tmp___ns__ScopeFocusAdjust;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:11011/unimap_service.cgi";
	soap_action = "urn:UnimapSoapXml#ScopeFocusAdjustRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns__ScopeFocusAdjust.input = input;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns__ScopeFocusAdjust(soap, &soap_tmp___ns__ScopeFocusAdjust);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns__ScopeFocusAdjust(soap, &soap_tmp___ns__ScopeFocusAdjust, "-ns:ScopeFocusAdjust", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns__ScopeFocusAdjust(soap, &soap_tmp___ns__ScopeFocusAdjust, "-ns:ScopeFocusAdjust", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	result->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	result->soap_get(soap, "ns:ScopeFocusAdjustResponseType", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
