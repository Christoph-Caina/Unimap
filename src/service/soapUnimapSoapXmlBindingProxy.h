/* soapUnimapSoapXmlBindingProxy.h
   Generated by gSOAP 2.7.16 from unimap_service.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapUnimapSoapXmlBindingProxy_H
#define soapUnimapSoapXmlBindingProxy_H
#include "soapH.h"

class SOAP_CMAC UnimapSoapXmlBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'UnimapSoapXmlBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	UnimapSoapXmlBindingProxy();
	/// Constructor with copy of another engine state
	UnimapSoapXmlBindingProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	UnimapSoapXmlBindingProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	UnimapSoapXmlBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~UnimapSoapXmlBindingProxy();
	/// Initializer used by constructors
	virtual	void UnimapSoapXmlBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'ImageSolve' (returns error code or SOAP_OK)
	virtual	int ImageSolve(ns__ImageSolveRequestType *ns__ImageSolveRequest, ns__ImageSolveResponseType *ns__ImageSolveResponse);

	/// Web service operation 'ScopePositionSet' (returns error code or SOAP_OK)
	virtual	int ScopePositionSet(ns__ScopePositionSetRequestType *input, ns__ScopePositionSetResponseType *result);

	/// Web service operation 'ScopePositionGet' (returns error code or SOAP_OK)
	virtual	int ScopePositionGet(ns__ScopePositionGetRequestType *input, ns__ScopePositionGetResponseType *result);

	/// Web service operation 'CameraImageTake' (returns error code or SOAP_OK)
	virtual	int CameraImageTake(ns__CameraImageTakeRequestType *input, ns__CameraImageTakeResponseType *result);

	/// Web service operation 'ScopeFocusAdjust' (returns error code or SOAP_OK)
	virtual	int ScopeFocusAdjust(ns__ScopeFocusAdjustRequestType *input, ns__ScopeFocusAdjustResponseType *result);
};
#endif
