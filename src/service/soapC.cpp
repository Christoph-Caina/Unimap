/* soapC.cpp
   Generated by gSOAP 2.7.16 from unimap_service.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.16 2013-04-18 16:54:18 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_ns__ScopeFocusAdjustResponseType:
		return soap_in_ns__ScopeFocusAdjustResponseType(soap, NULL, NULL, "ns:ScopeFocusAdjustResponseType");
	case SOAP_TYPE_ns__ScopeFocusAdjustRequestType:
		return soap_in_ns__ScopeFocusAdjustRequestType(soap, NULL, NULL, "ns:ScopeFocusAdjustRequestType");
	case SOAP_TYPE_ns__CameraImageTakeResponseType:
		return soap_in_ns__CameraImageTakeResponseType(soap, NULL, NULL, "ns:CameraImageTakeResponseType");
	case SOAP_TYPE_ns__CameraImageTakeRequestType:
		return soap_in_ns__CameraImageTakeRequestType(soap, NULL, NULL, "ns:CameraImageTakeRequestType");
	case SOAP_TYPE_ns__ScopePositionGetResponseType:
		return soap_in_ns__ScopePositionGetResponseType(soap, NULL, NULL, "ns:ScopePositionGetResponseType");
	case SOAP_TYPE_ns__ScopePositionGetRequestType:
		return soap_in_ns__ScopePositionGetRequestType(soap, NULL, NULL, "ns:ScopePositionGetRequestType");
	case SOAP_TYPE_ns__ScopePositionSetResponseType:
		return soap_in_ns__ScopePositionSetResponseType(soap, NULL, NULL, "ns:ScopePositionSetResponseType");
	case SOAP_TYPE_ns__ScopePositionSetRequestType:
		return soap_in_ns__ScopePositionSetRequestType(soap, NULL, NULL, "ns:ScopePositionSetRequestType");
	case SOAP_TYPE_ns__ImageSolveResponseType:
		return soap_in_ns__ImageSolveResponseType(soap, NULL, NULL, "ns:ImageSolveResponseType");
	case SOAP_TYPE_ns__ImageSolveRequestType:
		return soap_in_ns__ImageSolveRequestType(soap, NULL, NULL, "ns:ImageSolveRequestType");
	case SOAP_TYPE_ns__ImgObjDetectedType:
		return soap_in_ns__ImgObjDetectedType(soap, NULL, NULL, "ns:ImgObjDetectedType");
	case SOAP_TYPE_ns__ImgDataHeaderType:
		return soap_in_ns__ImgDataHeaderType(soap, NULL, NULL, "ns:ImgDataHeaderType");
	case SOAP_TYPE_ns__ResponseStatusType:
		return soap_in_ns__ResponseStatusType(soap, NULL, NULL, "ns:ResponseStatusType");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons__ScopeFocusAdjustResponseType:
		return soap_in_PointerTons__ScopeFocusAdjustResponseType(soap, NULL, NULL, "ns:ScopeFocusAdjustResponseType");
	case SOAP_TYPE_PointerTons__ScopeFocusAdjustRequestType:
		return soap_in_PointerTons__ScopeFocusAdjustRequestType(soap, NULL, NULL, "ns:ScopeFocusAdjustRequestType");
	case SOAP_TYPE_PointerTons__CameraImageTakeResponseType:
		return soap_in_PointerTons__CameraImageTakeResponseType(soap, NULL, NULL, "ns:CameraImageTakeResponseType");
	case SOAP_TYPE_PointerTons__CameraImageTakeRequestType:
		return soap_in_PointerTons__CameraImageTakeRequestType(soap, NULL, NULL, "ns:CameraImageTakeRequestType");
	case SOAP_TYPE_PointerTons__ScopePositionGetResponseType:
		return soap_in_PointerTons__ScopePositionGetResponseType(soap, NULL, NULL, "ns:ScopePositionGetResponseType");
	case SOAP_TYPE_PointerTons__ScopePositionGetRequestType:
		return soap_in_PointerTons__ScopePositionGetRequestType(soap, NULL, NULL, "ns:ScopePositionGetRequestType");
	case SOAP_TYPE_PointerTons__ScopePositionSetResponseType:
		return soap_in_PointerTons__ScopePositionSetResponseType(soap, NULL, NULL, "ns:ScopePositionSetResponseType");
	case SOAP_TYPE_PointerTons__ScopePositionSetRequestType:
		return soap_in_PointerTons__ScopePositionSetRequestType(soap, NULL, NULL, "ns:ScopePositionSetRequestType");
	case SOAP_TYPE_PointerTons__ImageSolveResponseType:
		return soap_in_PointerTons__ImageSolveResponseType(soap, NULL, NULL, "ns:ImageSolveResponseType");
	case SOAP_TYPE_PointerTons__ImageSolveRequestType:
		return soap_in_PointerTons__ImageSolveRequestType(soap, NULL, NULL, "ns:ImageSolveRequestType");
	case SOAP_TYPE_PointerTons__ImgObjDetectedType:
		return soap_in_PointerTons__ImgObjDetectedType(soap, NULL, NULL, "ns:ImgObjDetectedType");
	case SOAP_TYPE_PointerTons__ImgDataHeaderType:
		return soap_in_PointerTons__ImgDataHeaderType(soap, NULL, NULL, "ns:ImgDataHeaderType");
	case SOAP_TYPE_PointerTons__ResponseStatusType:
		return soap_in_PointerTons__ResponseStatusType(soap, NULL, NULL, "ns:ResponseStatusType");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns:ScopeFocusAdjustResponseType"))
		{	*type = SOAP_TYPE_ns__ScopeFocusAdjustResponseType;
			return soap_in_ns__ScopeFocusAdjustResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ScopeFocusAdjustRequestType"))
		{	*type = SOAP_TYPE_ns__ScopeFocusAdjustRequestType;
			return soap_in_ns__ScopeFocusAdjustRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CameraImageTakeResponseType"))
		{	*type = SOAP_TYPE_ns__CameraImageTakeResponseType;
			return soap_in_ns__CameraImageTakeResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:CameraImageTakeRequestType"))
		{	*type = SOAP_TYPE_ns__CameraImageTakeRequestType;
			return soap_in_ns__CameraImageTakeRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ScopePositionGetResponseType"))
		{	*type = SOAP_TYPE_ns__ScopePositionGetResponseType;
			return soap_in_ns__ScopePositionGetResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ScopePositionGetRequestType"))
		{	*type = SOAP_TYPE_ns__ScopePositionGetRequestType;
			return soap_in_ns__ScopePositionGetRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ScopePositionSetResponseType"))
		{	*type = SOAP_TYPE_ns__ScopePositionSetResponseType;
			return soap_in_ns__ScopePositionSetResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ScopePositionSetRequestType"))
		{	*type = SOAP_TYPE_ns__ScopePositionSetRequestType;
			return soap_in_ns__ScopePositionSetRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ImageSolveResponseType"))
		{	*type = SOAP_TYPE_ns__ImageSolveResponseType;
			return soap_in_ns__ImageSolveResponseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ImageSolveRequestType"))
		{	*type = SOAP_TYPE_ns__ImageSolveRequestType;
			return soap_in_ns__ImageSolveRequestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ImgObjDetectedType"))
		{	*type = SOAP_TYPE_ns__ImgObjDetectedType;
			return soap_in_ns__ImgObjDetectedType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ImgDataHeaderType"))
		{	*type = SOAP_TYPE_ns__ImgDataHeaderType;
			return soap_in_ns__ImgDataHeaderType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ResponseStatusType"))
		{	*type = SOAP_TYPE_ns__ResponseStatusType;
			return soap_in_ns__ResponseStatusType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_ns__ScopeFocusAdjustResponseType:
		return ((ns__ScopeFocusAdjustResponseType *)ptr)->soap_out(soap, tag, id, "ns:ScopeFocusAdjustResponseType");
	case SOAP_TYPE_ns__ScopeFocusAdjustRequestType:
		return ((ns__ScopeFocusAdjustRequestType *)ptr)->soap_out(soap, tag, id, "ns:ScopeFocusAdjustRequestType");
	case SOAP_TYPE_ns__CameraImageTakeResponseType:
		return ((ns__CameraImageTakeResponseType *)ptr)->soap_out(soap, tag, id, "ns:CameraImageTakeResponseType");
	case SOAP_TYPE_ns__CameraImageTakeRequestType:
		return ((ns__CameraImageTakeRequestType *)ptr)->soap_out(soap, tag, id, "ns:CameraImageTakeRequestType");
	case SOAP_TYPE_ns__ScopePositionGetResponseType:
		return ((ns__ScopePositionGetResponseType *)ptr)->soap_out(soap, tag, id, "ns:ScopePositionGetResponseType");
	case SOAP_TYPE_ns__ScopePositionGetRequestType:
		return ((ns__ScopePositionGetRequestType *)ptr)->soap_out(soap, tag, id, "ns:ScopePositionGetRequestType");
	case SOAP_TYPE_ns__ScopePositionSetResponseType:
		return ((ns__ScopePositionSetResponseType *)ptr)->soap_out(soap, tag, id, "ns:ScopePositionSetResponseType");
	case SOAP_TYPE_ns__ScopePositionSetRequestType:
		return ((ns__ScopePositionSetRequestType *)ptr)->soap_out(soap, tag, id, "ns:ScopePositionSetRequestType");
	case SOAP_TYPE_ns__ImageSolveResponseType:
		return ((ns__ImageSolveResponseType *)ptr)->soap_out(soap, tag, id, "ns:ImageSolveResponseType");
	case SOAP_TYPE_ns__ImageSolveRequestType:
		return ((ns__ImageSolveRequestType *)ptr)->soap_out(soap, tag, id, "ns:ImageSolveRequestType");
	case SOAP_TYPE_ns__ImgObjDetectedType:
		return ((ns__ImgObjDetectedType *)ptr)->soap_out(soap, tag, id, "ns:ImgObjDetectedType");
	case SOAP_TYPE_ns__ImgDataHeaderType:
		return ((ns__ImgDataHeaderType *)ptr)->soap_out(soap, tag, id, "ns:ImgDataHeaderType");
	case SOAP_TYPE_ns__ResponseStatusType:
		return ((ns__ResponseStatusType *)ptr)->soap_out(soap, tag, id, "ns:ResponseStatusType");
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons__ScopeFocusAdjustResponseType:
		return soap_out_PointerTons__ScopeFocusAdjustResponseType(soap, tag, id, (ns__ScopeFocusAdjustResponseType *const*)ptr, "ns:ScopeFocusAdjustResponseType");
	case SOAP_TYPE_PointerTons__ScopeFocusAdjustRequestType:
		return soap_out_PointerTons__ScopeFocusAdjustRequestType(soap, tag, id, (ns__ScopeFocusAdjustRequestType *const*)ptr, "ns:ScopeFocusAdjustRequestType");
	case SOAP_TYPE_PointerTons__CameraImageTakeResponseType:
		return soap_out_PointerTons__CameraImageTakeResponseType(soap, tag, id, (ns__CameraImageTakeResponseType *const*)ptr, "ns:CameraImageTakeResponseType");
	case SOAP_TYPE_PointerTons__CameraImageTakeRequestType:
		return soap_out_PointerTons__CameraImageTakeRequestType(soap, tag, id, (ns__CameraImageTakeRequestType *const*)ptr, "ns:CameraImageTakeRequestType");
	case SOAP_TYPE_PointerTons__ScopePositionGetResponseType:
		return soap_out_PointerTons__ScopePositionGetResponseType(soap, tag, id, (ns__ScopePositionGetResponseType *const*)ptr, "ns:ScopePositionGetResponseType");
	case SOAP_TYPE_PointerTons__ScopePositionGetRequestType:
		return soap_out_PointerTons__ScopePositionGetRequestType(soap, tag, id, (ns__ScopePositionGetRequestType *const*)ptr, "ns:ScopePositionGetRequestType");
	case SOAP_TYPE_PointerTons__ScopePositionSetResponseType:
		return soap_out_PointerTons__ScopePositionSetResponseType(soap, tag, id, (ns__ScopePositionSetResponseType *const*)ptr, "ns:ScopePositionSetResponseType");
	case SOAP_TYPE_PointerTons__ScopePositionSetRequestType:
		return soap_out_PointerTons__ScopePositionSetRequestType(soap, tag, id, (ns__ScopePositionSetRequestType *const*)ptr, "ns:ScopePositionSetRequestType");
	case SOAP_TYPE_PointerTons__ImageSolveResponseType:
		return soap_out_PointerTons__ImageSolveResponseType(soap, tag, id, (ns__ImageSolveResponseType *const*)ptr, "ns:ImageSolveResponseType");
	case SOAP_TYPE_PointerTons__ImageSolveRequestType:
		return soap_out_PointerTons__ImageSolveRequestType(soap, tag, id, (ns__ImageSolveRequestType *const*)ptr, "ns:ImageSolveRequestType");
	case SOAP_TYPE_PointerTons__ImgObjDetectedType:
		return soap_out_PointerTons__ImgObjDetectedType(soap, tag, id, (ns__ImgObjDetectedType *const*)ptr, "ns:ImgObjDetectedType");
	case SOAP_TYPE_PointerTons__ImgDataHeaderType:
		return soap_out_PointerTons__ImgDataHeaderType(soap, tag, id, (ns__ImgDataHeaderType *const*)ptr, "ns:ImgDataHeaderType");
	case SOAP_TYPE_PointerTons__ResponseStatusType:
		return soap_out_PointerTons__ResponseStatusType(soap, tag, id, (ns__ResponseStatusType *const*)ptr, "ns:ResponseStatusType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__ScopeFocusAdjustResponseType:
		((ns__ScopeFocusAdjustResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ScopeFocusAdjustRequestType:
		((ns__ScopeFocusAdjustRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__CameraImageTakeResponseType:
		((ns__CameraImageTakeResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__CameraImageTakeRequestType:
		((ns__CameraImageTakeRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ScopePositionGetResponseType:
		((ns__ScopePositionGetResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ScopePositionGetRequestType:
		((ns__ScopePositionGetRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ScopePositionSetResponseType:
		((ns__ScopePositionSetResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ScopePositionSetRequestType:
		((ns__ScopePositionSetRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ImageSolveResponseType:
		((ns__ImageSolveResponseType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ImageSolveRequestType:
		((ns__ImageSolveRequestType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ImgObjDetectedType:
		((ns__ImgObjDetectedType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ImgDataHeaderType:
		((ns__ImgDataHeaderType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__ResponseStatusType:
		((ns__ResponseStatusType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE___ns__ScopeFocusAdjust:
		soap_serialize___ns__ScopeFocusAdjust(soap, (const struct __ns__ScopeFocusAdjust *)ptr);
		break;
	case SOAP_TYPE___ns__CameraImageTake:
		soap_serialize___ns__CameraImageTake(soap, (const struct __ns__CameraImageTake *)ptr);
		break;
	case SOAP_TYPE___ns__ScopePositionGet:
		soap_serialize___ns__ScopePositionGet(soap, (const struct __ns__ScopePositionGet *)ptr);
		break;
	case SOAP_TYPE___ns__ScopePositionSet:
		soap_serialize___ns__ScopePositionSet(soap, (const struct __ns__ScopePositionSet *)ptr);
		break;
	case SOAP_TYPE___ns__ImageSolve:
		soap_serialize___ns__ImageSolve(soap, (const struct __ns__ImageSolve *)ptr);
		break;
	case SOAP_TYPE_PointerTons__ScopeFocusAdjustResponseType:
		soap_serialize_PointerTons__ScopeFocusAdjustResponseType(soap, (ns__ScopeFocusAdjustResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ScopeFocusAdjustRequestType:
		soap_serialize_PointerTons__ScopeFocusAdjustRequestType(soap, (ns__ScopeFocusAdjustRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__CameraImageTakeResponseType:
		soap_serialize_PointerTons__CameraImageTakeResponseType(soap, (ns__CameraImageTakeResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__CameraImageTakeRequestType:
		soap_serialize_PointerTons__CameraImageTakeRequestType(soap, (ns__CameraImageTakeRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ScopePositionGetResponseType:
		soap_serialize_PointerTons__ScopePositionGetResponseType(soap, (ns__ScopePositionGetResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ScopePositionGetRequestType:
		soap_serialize_PointerTons__ScopePositionGetRequestType(soap, (ns__ScopePositionGetRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ScopePositionSetResponseType:
		soap_serialize_PointerTons__ScopePositionSetResponseType(soap, (ns__ScopePositionSetResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ScopePositionSetRequestType:
		soap_serialize_PointerTons__ScopePositionSetRequestType(soap, (ns__ScopePositionSetRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ImageSolveResponseType:
		soap_serialize_PointerTons__ImageSolveResponseType(soap, (ns__ImageSolveResponseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ImageSolveRequestType:
		soap_serialize_PointerTons__ImageSolveRequestType(soap, (ns__ImageSolveRequestType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ImgObjDetectedType:
		soap_serialize_PointerTons__ImgObjDetectedType(soap, (ns__ImgObjDetectedType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ImgDataHeaderType:
		soap_serialize_PointerTons__ImgDataHeaderType(soap, (ns__ImgDataHeaderType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ResponseStatusType:
		soap_serialize_PointerTons__ResponseStatusType(soap, (ns__ResponseStatusType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ResponseStatusType:
		return (void*)soap_instantiate_ns__ResponseStatusType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ImgDataHeaderType:
		return (void*)soap_instantiate_ns__ImgDataHeaderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ImgObjDetectedType:
		return (void*)soap_instantiate_ns__ImgObjDetectedType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ImageSolveRequestType:
		return (void*)soap_instantiate_ns__ImageSolveRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ImageSolveResponseType:
		return (void*)soap_instantiate_ns__ImageSolveResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ScopePositionSetRequestType:
		return (void*)soap_instantiate_ns__ScopePositionSetRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ScopePositionSetResponseType:
		return (void*)soap_instantiate_ns__ScopePositionSetResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ScopePositionGetRequestType:
		return (void*)soap_instantiate_ns__ScopePositionGetRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ScopePositionGetResponseType:
		return (void*)soap_instantiate_ns__ScopePositionGetResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__CameraImageTakeRequestType:
		return (void*)soap_instantiate_ns__CameraImageTakeRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__CameraImageTakeResponseType:
		return (void*)soap_instantiate_ns__CameraImageTakeResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ScopeFocusAdjustRequestType:
		return (void*)soap_instantiate_ns__ScopeFocusAdjustRequestType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ScopeFocusAdjustResponseType:
		return (void*)soap_instantiate_ns__ScopeFocusAdjustResponseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns__ImageSolve:
		return (void*)soap_instantiate___ns__ImageSolve(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns__ScopePositionSet:
		return (void*)soap_instantiate___ns__ScopePositionSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns__ScopePositionGet:
		return (void*)soap_instantiate___ns__ScopePositionGet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns__CameraImageTake:
		return (void*)soap_instantiate___ns__CameraImageTake(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns__ScopeFocusAdjust:
		return (void*)soap_instantiate___ns__ScopeFocusAdjust(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons__ImgObjDetectedType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons__ImgObjDetectedType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__ResponseStatusType:
		if (p->size < 0)
			SOAP_DELETE((ns__ResponseStatusType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ResponseStatusType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ImgDataHeaderType:
		if (p->size < 0)
			SOAP_DELETE((ns__ImgDataHeaderType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ImgDataHeaderType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ImgObjDetectedType:
		if (p->size < 0)
			SOAP_DELETE((ns__ImgObjDetectedType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ImgObjDetectedType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ImageSolveRequestType:
		if (p->size < 0)
			SOAP_DELETE((ns__ImageSolveRequestType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ImageSolveRequestType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ImageSolveResponseType:
		if (p->size < 0)
			SOAP_DELETE((ns__ImageSolveResponseType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ImageSolveResponseType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ScopePositionSetRequestType:
		if (p->size < 0)
			SOAP_DELETE((ns__ScopePositionSetRequestType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ScopePositionSetRequestType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ScopePositionSetResponseType:
		if (p->size < 0)
			SOAP_DELETE((ns__ScopePositionSetResponseType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ScopePositionSetResponseType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ScopePositionGetRequestType:
		if (p->size < 0)
			SOAP_DELETE((ns__ScopePositionGetRequestType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ScopePositionGetRequestType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ScopePositionGetResponseType:
		if (p->size < 0)
			SOAP_DELETE((ns__ScopePositionGetResponseType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ScopePositionGetResponseType*)p->ptr);
		break;
	case SOAP_TYPE_ns__CameraImageTakeRequestType:
		if (p->size < 0)
			SOAP_DELETE((ns__CameraImageTakeRequestType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__CameraImageTakeRequestType*)p->ptr);
		break;
	case SOAP_TYPE_ns__CameraImageTakeResponseType:
		if (p->size < 0)
			SOAP_DELETE((ns__CameraImageTakeResponseType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__CameraImageTakeResponseType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ScopeFocusAdjustRequestType:
		if (p->size < 0)
			SOAP_DELETE((ns__ScopeFocusAdjustRequestType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ScopeFocusAdjustRequestType*)p->ptr);
		break;
	case SOAP_TYPE_ns__ScopeFocusAdjustResponseType:
		if (p->size < 0)
			SOAP_DELETE((ns__ScopeFocusAdjustResponseType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ScopeFocusAdjustResponseType*)p->ptr);
		break;
	case SOAP_TYPE___ns__ImageSolve:
		if (p->size < 0)
			SOAP_DELETE((struct __ns__ImageSolve*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns__ImageSolve*)p->ptr);
		break;
	case SOAP_TYPE___ns__ScopePositionSet:
		if (p->size < 0)
			SOAP_DELETE((struct __ns__ScopePositionSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns__ScopePositionSet*)p->ptr);
		break;
	case SOAP_TYPE___ns__ScopePositionGet:
		if (p->size < 0)
			SOAP_DELETE((struct __ns__ScopePositionGet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns__ScopePositionGet*)p->ptr);
		break;
	case SOAP_TYPE___ns__CameraImageTake:
		if (p->size < 0)
			SOAP_DELETE((struct __ns__CameraImageTake*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns__CameraImageTake*)p->ptr);
		break;
	case SOAP_TYPE___ns__ScopeFocusAdjust:
		if (p->size < 0)
			SOAP_DELETE((struct __ns__ScopeFocusAdjust*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns__ScopeFocusAdjust*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons__ImgObjDetectedType:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns__ImgObjDetectedType * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns__ImgObjDetectedType * >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons__ImgObjDetectedType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns__ImgObjDetectedType * >*)p)[len] = *(ns__ImgObjDetectedType **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns__ScopeFocusAdjustResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns__ScopeFocusAdjustResponseType::ResponseStatus = NULL;
	/* transient soap skipped */
}

void ns__ScopeFocusAdjustResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ResponseStatusType(soap, &this->ns__ScopeFocusAdjustResponseType::ResponseStatus);
	/* transient soap skipped */
}

int ns__ScopeFocusAdjustResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ScopeFocusAdjustResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ScopeFocusAdjustResponseType(struct soap *soap, const char *tag, int id, const ns__ScopeFocusAdjustResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ScopeFocusAdjustResponseType), type))
		return soap->error;
	if (soap_out_PointerTons__ResponseStatusType(soap, "ResponseStatus", -1, &(a->ns__ScopeFocusAdjustResponseType::ResponseStatus), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ScopeFocusAdjustResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ScopeFocusAdjustResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ScopeFocusAdjustResponseType * SOAP_FMAC4 soap_in_ns__ScopeFocusAdjustResponseType(struct soap *soap, const char *tag, ns__ScopeFocusAdjustResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ScopeFocusAdjustResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ScopeFocusAdjustResponseType, sizeof(ns__ScopeFocusAdjustResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ScopeFocusAdjustResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ScopeFocusAdjustResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResponseStatus1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResponseStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ResponseStatusType(soap, "ResponseStatus", &(a->ns__ScopeFocusAdjustResponseType::ResponseStatus), "ns:ResponseStatusType"))
				{	soap_flag_ResponseStatus1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ScopeFocusAdjustResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ScopeFocusAdjustResponseType, 0, sizeof(ns__ScopeFocusAdjustResponseType), 0, soap_copy_ns__ScopeFocusAdjustResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResponseStatus1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ScopeFocusAdjustResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ScopeFocusAdjustResponseType);
	if (this->soap_out(soap, tag?tag:"ns:ScopeFocusAdjustResponseType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ScopeFocusAdjustResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ScopeFocusAdjustResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ScopeFocusAdjustResponseType * SOAP_FMAC4 soap_get_ns__ScopeFocusAdjustResponseType(struct soap *soap, ns__ScopeFocusAdjustResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ScopeFocusAdjustResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ScopeFocusAdjustResponseType * SOAP_FMAC2 soap_instantiate_ns__ScopeFocusAdjustResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ScopeFocusAdjustResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ScopeFocusAdjustResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopeFocusAdjustResponseType);
		if (size)
			*size = sizeof(ns__ScopeFocusAdjustResponseType);
		((ns__ScopeFocusAdjustResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopeFocusAdjustResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ScopeFocusAdjustResponseType);
		for (int i = 0; i < n; i++)
			((ns__ScopeFocusAdjustResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ScopeFocusAdjustResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ScopeFocusAdjustResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ScopeFocusAdjustResponseType %p -> %p\n", q, p));
	*(ns__ScopeFocusAdjustResponseType*)p = *(ns__ScopeFocusAdjustResponseType*)q;
}

void ns__ScopeFocusAdjustRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns__ScopeFocusAdjustRequestType::Position);
	soap_default_std__string(soap, &this->ns__ScopeFocusAdjustRequestType::Speed);
	/* transient soap skipped */
}

void ns__ScopeFocusAdjustRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__ScopeFocusAdjustRequestType::Position);
	soap_serialize_std__string(soap, &this->ns__ScopeFocusAdjustRequestType::Speed);
	/* transient soap skipped */
}

int ns__ScopeFocusAdjustRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ScopeFocusAdjustRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ScopeFocusAdjustRequestType(struct soap *soap, const char *tag, int id, const ns__ScopeFocusAdjustRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ScopeFocusAdjustRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "Position", -1, &(a->ns__ScopeFocusAdjustRequestType::Position), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Speed", -1, &(a->ns__ScopeFocusAdjustRequestType::Speed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ScopeFocusAdjustRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ScopeFocusAdjustRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ScopeFocusAdjustRequestType * SOAP_FMAC4 soap_in_ns__ScopeFocusAdjustRequestType(struct soap *soap, const char *tag, ns__ScopeFocusAdjustRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ScopeFocusAdjustRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ScopeFocusAdjustRequestType, sizeof(ns__ScopeFocusAdjustRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ScopeFocusAdjustRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ScopeFocusAdjustRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Position1 = 1;
	size_t soap_flag_Speed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Position1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Position", &(a->ns__ScopeFocusAdjustRequestType::Position), "xsd:string"))
				{	soap_flag_Position1--;
					continue;
				}
			if (soap_flag_Speed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Speed", &(a->ns__ScopeFocusAdjustRequestType::Speed), "xsd:string"))
				{	soap_flag_Speed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ScopeFocusAdjustRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ScopeFocusAdjustRequestType, 0, sizeof(ns__ScopeFocusAdjustRequestType), 0, soap_copy_ns__ScopeFocusAdjustRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Position1 > 0 || soap_flag_Speed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ScopeFocusAdjustRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ScopeFocusAdjustRequestType);
	if (this->soap_out(soap, tag?tag:"ns:ScopeFocusAdjustRequestType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ScopeFocusAdjustRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ScopeFocusAdjustRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ScopeFocusAdjustRequestType * SOAP_FMAC4 soap_get_ns__ScopeFocusAdjustRequestType(struct soap *soap, ns__ScopeFocusAdjustRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ScopeFocusAdjustRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ScopeFocusAdjustRequestType * SOAP_FMAC2 soap_instantiate_ns__ScopeFocusAdjustRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ScopeFocusAdjustRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ScopeFocusAdjustRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopeFocusAdjustRequestType);
		if (size)
			*size = sizeof(ns__ScopeFocusAdjustRequestType);
		((ns__ScopeFocusAdjustRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopeFocusAdjustRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ScopeFocusAdjustRequestType);
		for (int i = 0; i < n; i++)
			((ns__ScopeFocusAdjustRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ScopeFocusAdjustRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ScopeFocusAdjustRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ScopeFocusAdjustRequestType %p -> %p\n", q, p));
	*(ns__ScopeFocusAdjustRequestType*)p = *(ns__ScopeFocusAdjustRequestType*)q;
}

void ns__CameraImageTakeResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns__CameraImageTakeResponseType::ResponseStatus = NULL;
	/* transient soap skipped */
}

void ns__CameraImageTakeResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ResponseStatusType(soap, &this->ns__CameraImageTakeResponseType::ResponseStatus);
	/* transient soap skipped */
}

int ns__CameraImageTakeResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__CameraImageTakeResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CameraImageTakeResponseType(struct soap *soap, const char *tag, int id, const ns__CameraImageTakeResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CameraImageTakeResponseType), type))
		return soap->error;
	if (soap_out_PointerTons__ResponseStatusType(soap, "ResponseStatus", -1, &(a->ns__CameraImageTakeResponseType::ResponseStatus), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__CameraImageTakeResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__CameraImageTakeResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns__CameraImageTakeResponseType * SOAP_FMAC4 soap_in_ns__CameraImageTakeResponseType(struct soap *soap, const char *tag, ns__CameraImageTakeResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__CameraImageTakeResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CameraImageTakeResponseType, sizeof(ns__CameraImageTakeResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__CameraImageTakeResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__CameraImageTakeResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResponseStatus1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResponseStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ResponseStatusType(soap, "ResponseStatus", &(a->ns__CameraImageTakeResponseType::ResponseStatus), "ns:ResponseStatusType"))
				{	soap_flag_ResponseStatus1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__CameraImageTakeResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CameraImageTakeResponseType, 0, sizeof(ns__CameraImageTakeResponseType), 0, soap_copy_ns__CameraImageTakeResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResponseStatus1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__CameraImageTakeResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__CameraImageTakeResponseType);
	if (this->soap_out(soap, tag?tag:"ns:CameraImageTakeResponseType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__CameraImageTakeResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__CameraImageTakeResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns__CameraImageTakeResponseType * SOAP_FMAC4 soap_get_ns__CameraImageTakeResponseType(struct soap *soap, ns__CameraImageTakeResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CameraImageTakeResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__CameraImageTakeResponseType * SOAP_FMAC2 soap_instantiate_ns__CameraImageTakeResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CameraImageTakeResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__CameraImageTakeResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__CameraImageTakeResponseType);
		if (size)
			*size = sizeof(ns__CameraImageTakeResponseType);
		((ns__CameraImageTakeResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__CameraImageTakeResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__CameraImageTakeResponseType);
		for (int i = 0; i < n; i++)
			((ns__CameraImageTakeResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__CameraImageTakeResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__CameraImageTakeResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__CameraImageTakeResponseType %p -> %p\n", q, p));
	*(ns__CameraImageTakeResponseType*)p = *(ns__CameraImageTakeResponseType*)q;
}

void ns__CameraImageTakeRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->ns__CameraImageTakeRequestType::ExposureTime);
	soap_default_xsd__integer(soap, &this->ns__CameraImageTakeRequestType::NoOfExposures);
	soap_default_xsd__integer(soap, &this->ns__CameraImageTakeRequestType::ExposuresDelay);
	/* transient soap skipped */
}

void ns__CameraImageTakeRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__integer(soap, &this->ns__CameraImageTakeRequestType::ExposureTime);
	soap_serialize_xsd__integer(soap, &this->ns__CameraImageTakeRequestType::NoOfExposures);
	soap_serialize_xsd__integer(soap, &this->ns__CameraImageTakeRequestType::ExposuresDelay);
	/* transient soap skipped */
}

int ns__CameraImageTakeRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__CameraImageTakeRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CameraImageTakeRequestType(struct soap *soap, const char *tag, int id, const ns__CameraImageTakeRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__CameraImageTakeRequestType), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ExposureTime", -1, &(a->ns__CameraImageTakeRequestType::ExposureTime), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "NoOfExposures", -1, &(a->ns__CameraImageTakeRequestType::NoOfExposures), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ExposuresDelay", -1, &(a->ns__CameraImageTakeRequestType::ExposuresDelay), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__CameraImageTakeRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__CameraImageTakeRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns__CameraImageTakeRequestType * SOAP_FMAC4 soap_in_ns__CameraImageTakeRequestType(struct soap *soap, const char *tag, ns__CameraImageTakeRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__CameraImageTakeRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__CameraImageTakeRequestType, sizeof(ns__CameraImageTakeRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__CameraImageTakeRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__CameraImageTakeRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExposureTime1 = 1;
	size_t soap_flag_NoOfExposures1 = 1;
	size_t soap_flag_ExposuresDelay1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExposureTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ExposureTime", &(a->ns__CameraImageTakeRequestType::ExposureTime), "xsd:integer"))
				{	soap_flag_ExposureTime1--;
					continue;
				}
			if (soap_flag_NoOfExposures1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "NoOfExposures", &(a->ns__CameraImageTakeRequestType::NoOfExposures), "xsd:integer"))
				{	soap_flag_NoOfExposures1--;
					continue;
				}
			if (soap_flag_ExposuresDelay1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ExposuresDelay", &(a->ns__CameraImageTakeRequestType::ExposuresDelay), "xsd:integer"))
				{	soap_flag_ExposuresDelay1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__CameraImageTakeRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__CameraImageTakeRequestType, 0, sizeof(ns__CameraImageTakeRequestType), 0, soap_copy_ns__CameraImageTakeRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ExposureTime1 > 0 || soap_flag_NoOfExposures1 > 0 || soap_flag_ExposuresDelay1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__CameraImageTakeRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__CameraImageTakeRequestType);
	if (this->soap_out(soap, tag?tag:"ns:CameraImageTakeRequestType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__CameraImageTakeRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__CameraImageTakeRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns__CameraImageTakeRequestType * SOAP_FMAC4 soap_get_ns__CameraImageTakeRequestType(struct soap *soap, ns__CameraImageTakeRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__CameraImageTakeRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__CameraImageTakeRequestType * SOAP_FMAC2 soap_instantiate_ns__CameraImageTakeRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__CameraImageTakeRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__CameraImageTakeRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__CameraImageTakeRequestType);
		if (size)
			*size = sizeof(ns__CameraImageTakeRequestType);
		((ns__CameraImageTakeRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__CameraImageTakeRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__CameraImageTakeRequestType);
		for (int i = 0; i < n; i++)
			((ns__CameraImageTakeRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__CameraImageTakeRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__CameraImageTakeRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__CameraImageTakeRequestType %p -> %p\n", q, p));
	*(ns__CameraImageTakeRequestType*)p = *(ns__CameraImageTakeRequestType*)q;
}

void ns__ScopePositionGetResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns__ScopePositionGetResponseType::ResponseStatus = NULL;
	soap_default_double(soap, &this->ns__ScopePositionGetResponseType::RA);
	soap_default_double(soap, &this->ns__ScopePositionGetResponseType::DEC);
	/* transient soap skipped */
}

void ns__ScopePositionGetResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ResponseStatusType(soap, &this->ns__ScopePositionGetResponseType::ResponseStatus);
	/* transient soap skipped */
}

int ns__ScopePositionGetResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ScopePositionGetResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ScopePositionGetResponseType(struct soap *soap, const char *tag, int id, const ns__ScopePositionGetResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ScopePositionGetResponseType), type))
		return soap->error;
	if (soap_out_PointerTons__ResponseStatusType(soap, "ResponseStatus", -1, &(a->ns__ScopePositionGetResponseType::ResponseStatus), ""))
		return soap->error;
	if (soap_out_double(soap, "RA", -1, &(a->ns__ScopePositionGetResponseType::RA), ""))
		return soap->error;
	if (soap_out_double(soap, "DEC", -1, &(a->ns__ScopePositionGetResponseType::DEC), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ScopePositionGetResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ScopePositionGetResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ScopePositionGetResponseType * SOAP_FMAC4 soap_in_ns__ScopePositionGetResponseType(struct soap *soap, const char *tag, ns__ScopePositionGetResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ScopePositionGetResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ScopePositionGetResponseType, sizeof(ns__ScopePositionGetResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ScopePositionGetResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ScopePositionGetResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResponseStatus1 = 1;
	size_t soap_flag_RA1 = 1;
	size_t soap_flag_DEC1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResponseStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ResponseStatusType(soap, "ResponseStatus", &(a->ns__ScopePositionGetResponseType::ResponseStatus), "ns:ResponseStatusType"))
				{	soap_flag_ResponseStatus1--;
					continue;
				}
			if (soap_flag_RA1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "RA", &(a->ns__ScopePositionGetResponseType::RA), "xsd:double"))
				{	soap_flag_RA1--;
					continue;
				}
			if (soap_flag_DEC1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "DEC", &(a->ns__ScopePositionGetResponseType::DEC), "xsd:double"))
				{	soap_flag_DEC1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ScopePositionGetResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ScopePositionGetResponseType, 0, sizeof(ns__ScopePositionGetResponseType), 0, soap_copy_ns__ScopePositionGetResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResponseStatus1 > 0 || soap_flag_RA1 > 0 || soap_flag_DEC1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ScopePositionGetResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ScopePositionGetResponseType);
	if (this->soap_out(soap, tag?tag:"ns:ScopePositionGetResponseType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ScopePositionGetResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ScopePositionGetResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ScopePositionGetResponseType * SOAP_FMAC4 soap_get_ns__ScopePositionGetResponseType(struct soap *soap, ns__ScopePositionGetResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ScopePositionGetResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ScopePositionGetResponseType * SOAP_FMAC2 soap_instantiate_ns__ScopePositionGetResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ScopePositionGetResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ScopePositionGetResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionGetResponseType);
		if (size)
			*size = sizeof(ns__ScopePositionGetResponseType);
		((ns__ScopePositionGetResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionGetResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ScopePositionGetResponseType);
		for (int i = 0; i < n; i++)
			((ns__ScopePositionGetResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ScopePositionGetResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ScopePositionGetResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ScopePositionGetResponseType %p -> %p\n", q, p));
	*(ns__ScopePositionGetResponseType*)p = *(ns__ScopePositionGetResponseType*)q;
}

void ns__ScopePositionGetRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->ns__ScopePositionGetRequestType::ScopeId);
	/* transient soap skipped */
}

void ns__ScopePositionGetRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__integer(soap, &this->ns__ScopePositionGetRequestType::ScopeId);
	/* transient soap skipped */
}

int ns__ScopePositionGetRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ScopePositionGetRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ScopePositionGetRequestType(struct soap *soap, const char *tag, int id, const ns__ScopePositionGetRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ScopePositionGetRequestType), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ScopeId", -1, &(a->ns__ScopePositionGetRequestType::ScopeId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ScopePositionGetRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ScopePositionGetRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ScopePositionGetRequestType * SOAP_FMAC4 soap_in_ns__ScopePositionGetRequestType(struct soap *soap, const char *tag, ns__ScopePositionGetRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ScopePositionGetRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ScopePositionGetRequestType, sizeof(ns__ScopePositionGetRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ScopePositionGetRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ScopePositionGetRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ScopeId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ScopeId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ScopeId", &(a->ns__ScopePositionGetRequestType::ScopeId), "xsd:integer"))
				{	soap_flag_ScopeId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ScopePositionGetRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ScopePositionGetRequestType, 0, sizeof(ns__ScopePositionGetRequestType), 0, soap_copy_ns__ScopePositionGetRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ScopeId1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ScopePositionGetRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ScopePositionGetRequestType);
	if (this->soap_out(soap, tag?tag:"ns:ScopePositionGetRequestType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ScopePositionGetRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ScopePositionGetRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ScopePositionGetRequestType * SOAP_FMAC4 soap_get_ns__ScopePositionGetRequestType(struct soap *soap, ns__ScopePositionGetRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ScopePositionGetRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ScopePositionGetRequestType * SOAP_FMAC2 soap_instantiate_ns__ScopePositionGetRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ScopePositionGetRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ScopePositionGetRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionGetRequestType);
		if (size)
			*size = sizeof(ns__ScopePositionGetRequestType);
		((ns__ScopePositionGetRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionGetRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ScopePositionGetRequestType);
		for (int i = 0; i < n; i++)
			((ns__ScopePositionGetRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ScopePositionGetRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ScopePositionGetRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ScopePositionGetRequestType %p -> %p\n", q, p));
	*(ns__ScopePositionGetRequestType*)p = *(ns__ScopePositionGetRequestType*)q;
}

void ns__ScopePositionSetResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns__ScopePositionSetResponseType::ResponseStatus = NULL;
	/* transient soap skipped */
}

void ns__ScopePositionSetResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ResponseStatusType(soap, &this->ns__ScopePositionSetResponseType::ResponseStatus);
	/* transient soap skipped */
}

int ns__ScopePositionSetResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ScopePositionSetResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ScopePositionSetResponseType(struct soap *soap, const char *tag, int id, const ns__ScopePositionSetResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ScopePositionSetResponseType), type))
		return soap->error;
	if (soap_out_PointerTons__ResponseStatusType(soap, "ResponseStatus", -1, &(a->ns__ScopePositionSetResponseType::ResponseStatus), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ScopePositionSetResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ScopePositionSetResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ScopePositionSetResponseType * SOAP_FMAC4 soap_in_ns__ScopePositionSetResponseType(struct soap *soap, const char *tag, ns__ScopePositionSetResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ScopePositionSetResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ScopePositionSetResponseType, sizeof(ns__ScopePositionSetResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ScopePositionSetResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ScopePositionSetResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResponseStatus1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResponseStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ResponseStatusType(soap, "ResponseStatus", &(a->ns__ScopePositionSetResponseType::ResponseStatus), "ns:ResponseStatusType"))
				{	soap_flag_ResponseStatus1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ScopePositionSetResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ScopePositionSetResponseType, 0, sizeof(ns__ScopePositionSetResponseType), 0, soap_copy_ns__ScopePositionSetResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResponseStatus1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ScopePositionSetResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ScopePositionSetResponseType);
	if (this->soap_out(soap, tag?tag:"ns:ScopePositionSetResponseType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ScopePositionSetResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ScopePositionSetResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ScopePositionSetResponseType * SOAP_FMAC4 soap_get_ns__ScopePositionSetResponseType(struct soap *soap, ns__ScopePositionSetResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ScopePositionSetResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ScopePositionSetResponseType * SOAP_FMAC2 soap_instantiate_ns__ScopePositionSetResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ScopePositionSetResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ScopePositionSetResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionSetResponseType);
		if (size)
			*size = sizeof(ns__ScopePositionSetResponseType);
		((ns__ScopePositionSetResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionSetResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ScopePositionSetResponseType);
		for (int i = 0; i < n; i++)
			((ns__ScopePositionSetResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ScopePositionSetResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ScopePositionSetResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ScopePositionSetResponseType %p -> %p\n", q, p));
	*(ns__ScopePositionSetResponseType*)p = *(ns__ScopePositionSetResponseType*)q;
}

void ns__ScopePositionSetRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->ns__ScopePositionSetRequestType::ScopeId);
	soap_default_double(soap, &this->ns__ScopePositionSetRequestType::RA);
	soap_default_double(soap, &this->ns__ScopePositionSetRequestType::DEC);
	/* transient soap skipped */
}

void ns__ScopePositionSetRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__integer(soap, &this->ns__ScopePositionSetRequestType::ScopeId);
	/* transient soap skipped */
}

int ns__ScopePositionSetRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ScopePositionSetRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ScopePositionSetRequestType(struct soap *soap, const char *tag, int id, const ns__ScopePositionSetRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ScopePositionSetRequestType), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ScopeId", -1, &(a->ns__ScopePositionSetRequestType::ScopeId), ""))
		return soap->error;
	if (soap_out_double(soap, "RA", -1, &(a->ns__ScopePositionSetRequestType::RA), ""))
		return soap->error;
	if (soap_out_double(soap, "DEC", -1, &(a->ns__ScopePositionSetRequestType::DEC), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ScopePositionSetRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ScopePositionSetRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ScopePositionSetRequestType * SOAP_FMAC4 soap_in_ns__ScopePositionSetRequestType(struct soap *soap, const char *tag, ns__ScopePositionSetRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ScopePositionSetRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ScopePositionSetRequestType, sizeof(ns__ScopePositionSetRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ScopePositionSetRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ScopePositionSetRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ScopeId1 = 1;
	size_t soap_flag_RA1 = 1;
	size_t soap_flag_DEC1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ScopeId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ScopeId", &(a->ns__ScopePositionSetRequestType::ScopeId), "xsd:integer"))
				{	soap_flag_ScopeId1--;
					continue;
				}
			if (soap_flag_RA1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "RA", &(a->ns__ScopePositionSetRequestType::RA), "xsd:double"))
				{	soap_flag_RA1--;
					continue;
				}
			if (soap_flag_DEC1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "DEC", &(a->ns__ScopePositionSetRequestType::DEC), "xsd:double"))
				{	soap_flag_DEC1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ScopePositionSetRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ScopePositionSetRequestType, 0, sizeof(ns__ScopePositionSetRequestType), 0, soap_copy_ns__ScopePositionSetRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ScopeId1 > 0 || soap_flag_RA1 > 0 || soap_flag_DEC1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ScopePositionSetRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ScopePositionSetRequestType);
	if (this->soap_out(soap, tag?tag:"ns:ScopePositionSetRequestType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ScopePositionSetRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ScopePositionSetRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ScopePositionSetRequestType * SOAP_FMAC4 soap_get_ns__ScopePositionSetRequestType(struct soap *soap, ns__ScopePositionSetRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ScopePositionSetRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ScopePositionSetRequestType * SOAP_FMAC2 soap_instantiate_ns__ScopePositionSetRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ScopePositionSetRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ScopePositionSetRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionSetRequestType);
		if (size)
			*size = sizeof(ns__ScopePositionSetRequestType);
		((ns__ScopePositionSetRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ScopePositionSetRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ScopePositionSetRequestType);
		for (int i = 0; i < n; i++)
			((ns__ScopePositionSetRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ScopePositionSetRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ScopePositionSetRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ScopePositionSetRequestType %p -> %p\n", q, p));
	*(ns__ScopePositionSetRequestType*)p = *(ns__ScopePositionSetRequestType*)q;
}

void ns__ImageSolveResponseType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns__ImageSolveResponseType::ResponseStatus = NULL;
	this->ns__ImageSolveResponseType::ImgDataHeader = NULL;
	soap_default_std__vectorTemplateOfPointerTons__ImgObjDetectedType(soap, &this->ns__ImageSolveResponseType::vectImgObjDetected);
	/* transient soap skipped */
}

void ns__ImageSolveResponseType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ResponseStatusType(soap, &this->ns__ImageSolveResponseType::ResponseStatus);
	soap_serialize_PointerTons__ImgDataHeaderType(soap, &this->ns__ImageSolveResponseType::ImgDataHeader);
	soap_serialize_std__vectorTemplateOfPointerTons__ImgObjDetectedType(soap, &this->ns__ImageSolveResponseType::vectImgObjDetected);
	/* transient soap skipped */
}

int ns__ImageSolveResponseType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ImageSolveResponseType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ImageSolveResponseType(struct soap *soap, const char *tag, int id, const ns__ImageSolveResponseType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ImageSolveResponseType), type))
		return soap->error;
	if (soap_out_PointerTons__ResponseStatusType(soap, "ResponseStatus", -1, &(a->ns__ImageSolveResponseType::ResponseStatus), ""))
		return soap->error;
	if (soap_out_PointerTons__ImgDataHeaderType(soap, "ImgDataHeader", -1, &(a->ns__ImageSolveResponseType::ImgDataHeader), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons__ImgObjDetectedType(soap, "vectImgObjDetected", -1, &(a->ns__ImageSolveResponseType::vectImgObjDetected), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ImageSolveResponseType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ImageSolveResponseType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ImageSolveResponseType * SOAP_FMAC4 soap_in_ns__ImageSolveResponseType(struct soap *soap, const char *tag, ns__ImageSolveResponseType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ImageSolveResponseType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ImageSolveResponseType, sizeof(ns__ImageSolveResponseType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ImageSolveResponseType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ImageSolveResponseType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResponseStatus1 = 1;
	size_t soap_flag_ImgDataHeader1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResponseStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ResponseStatusType(soap, "ResponseStatus", &(a->ns__ImageSolveResponseType::ResponseStatus), "ns:ResponseStatusType"))
				{	soap_flag_ResponseStatus1--;
					continue;
				}
			if (soap_flag_ImgDataHeader1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ImgDataHeaderType(soap, "ImgDataHeader", &(a->ns__ImageSolveResponseType::ImgDataHeader), "ns:ImgDataHeaderType"))
				{	soap_flag_ImgDataHeader1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons__ImgObjDetectedType(soap, "vectImgObjDetected", &(a->ns__ImageSolveResponseType::vectImgObjDetected), "ns:ImgObjDetectedType"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ImageSolveResponseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ImageSolveResponseType, 0, sizeof(ns__ImageSolveResponseType), 0, soap_copy_ns__ImageSolveResponseType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResponseStatus1 > 0 || soap_flag_ImgDataHeader1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ImageSolveResponseType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ImageSolveResponseType);
	if (this->soap_out(soap, tag?tag:"ns:ImageSolveResponseType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ImageSolveResponseType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ImageSolveResponseType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ImageSolveResponseType * SOAP_FMAC4 soap_get_ns__ImageSolveResponseType(struct soap *soap, ns__ImageSolveResponseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ImageSolveResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ImageSolveResponseType * SOAP_FMAC2 soap_instantiate_ns__ImageSolveResponseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ImageSolveResponseType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ImageSolveResponseType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ImageSolveResponseType);
		if (size)
			*size = sizeof(ns__ImageSolveResponseType);
		((ns__ImageSolveResponseType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ImageSolveResponseType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ImageSolveResponseType);
		for (int i = 0; i < n; i++)
			((ns__ImageSolveResponseType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ImageSolveResponseType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ImageSolveResponseType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ImageSolveResponseType %p -> %p\n", q, p));
	*(ns__ImageSolveResponseType*)p = *(ns__ImageSolveResponseType*)q;
}

void ns__ImageSolveRequestType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns__ImageSolveRequestType::ImageName);
	soap_default_std__string(soap, &this->ns__ImageSolveRequestType::ImagePath);
	soap_default_std__string(soap, &this->ns__ImageSolveRequestType::SearchCatalog);
	/* transient soap skipped */
}

void ns__ImageSolveRequestType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__ImageSolveRequestType::ImageName);
	soap_serialize_std__string(soap, &this->ns__ImageSolveRequestType::ImagePath);
	soap_serialize_std__string(soap, &this->ns__ImageSolveRequestType::SearchCatalog);
	/* transient soap skipped */
}

int ns__ImageSolveRequestType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ImageSolveRequestType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ImageSolveRequestType(struct soap *soap, const char *tag, int id, const ns__ImageSolveRequestType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ImageSolveRequestType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ImageName", -1, &(a->ns__ImageSolveRequestType::ImageName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ImagePath", -1, &(a->ns__ImageSolveRequestType::ImagePath), ""))
		return soap->error;
	if (soap_out_std__string(soap, "SearchCatalog", -1, &(a->ns__ImageSolveRequestType::SearchCatalog), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ImageSolveRequestType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ImageSolveRequestType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ImageSolveRequestType * SOAP_FMAC4 soap_in_ns__ImageSolveRequestType(struct soap *soap, const char *tag, ns__ImageSolveRequestType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ImageSolveRequestType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ImageSolveRequestType, sizeof(ns__ImageSolveRequestType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ImageSolveRequestType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ImageSolveRequestType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ImageName1 = 1;
	size_t soap_flag_ImagePath1 = 1;
	size_t soap_flag_SearchCatalog1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ImageName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ImageName", &(a->ns__ImageSolveRequestType::ImageName), "xsd:string"))
				{	soap_flag_ImageName1--;
					continue;
				}
			if (soap_flag_ImagePath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ImagePath", &(a->ns__ImageSolveRequestType::ImagePath), "xsd:string"))
				{	soap_flag_ImagePath1--;
					continue;
				}
			if (soap_flag_SearchCatalog1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "SearchCatalog", &(a->ns__ImageSolveRequestType::SearchCatalog), "xsd:string"))
				{	soap_flag_SearchCatalog1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ImageSolveRequestType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ImageSolveRequestType, 0, sizeof(ns__ImageSolveRequestType), 0, soap_copy_ns__ImageSolveRequestType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ImageName1 > 0 || soap_flag_ImagePath1 > 0 || soap_flag_SearchCatalog1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ImageSolveRequestType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ImageSolveRequestType);
	if (this->soap_out(soap, tag?tag:"ns:ImageSolveRequestType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ImageSolveRequestType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ImageSolveRequestType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ImageSolveRequestType * SOAP_FMAC4 soap_get_ns__ImageSolveRequestType(struct soap *soap, ns__ImageSolveRequestType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ImageSolveRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ImageSolveRequestType * SOAP_FMAC2 soap_instantiate_ns__ImageSolveRequestType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ImageSolveRequestType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ImageSolveRequestType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ImageSolveRequestType);
		if (size)
			*size = sizeof(ns__ImageSolveRequestType);
		((ns__ImageSolveRequestType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ImageSolveRequestType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ImageSolveRequestType);
		for (int i = 0; i < n; i++)
			((ns__ImageSolveRequestType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ImageSolveRequestType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ImageSolveRequestType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ImageSolveRequestType %p -> %p\n", q, p));
	*(ns__ImageSolveRequestType*)p = *(ns__ImageSolveRequestType*)q;
}

void ns__ImgObjDetectedType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->ns__ImgObjDetectedType::id);
	soap_default_std__string(soap, &this->ns__ImgObjDetectedType::name);
	soap_default_double(soap, &this->ns__ImgObjDetectedType::x);
	soap_default_double(soap, &this->ns__ImgObjDetectedType::y);
	soap_default_double(soap, &this->ns__ImgObjDetectedType::ra);
	soap_default_double(soap, &this->ns__ImgObjDetectedType::dec);
	soap_default_double(soap, &this->ns__ImgObjDetectedType::mag);
	/* transient soap skipped */
}

void ns__ImgObjDetectedType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__integer(soap, &this->ns__ImgObjDetectedType::id);
	soap_serialize_std__string(soap, &this->ns__ImgObjDetectedType::name);
	/* transient soap skipped */
}

int ns__ImgObjDetectedType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ImgObjDetectedType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ImgObjDetectedType(struct soap *soap, const char *tag, int id, const ns__ImgObjDetectedType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ImgObjDetectedType), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "id", -1, &(a->ns__ImgObjDetectedType::id), ""))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->ns__ImgObjDetectedType::name), ""))
		return soap->error;
	if (soap_out_double(soap, "x", -1, &(a->ns__ImgObjDetectedType::x), ""))
		return soap->error;
	if (soap_out_double(soap, "y", -1, &(a->ns__ImgObjDetectedType::y), ""))
		return soap->error;
	if (soap_out_double(soap, "ra", -1, &(a->ns__ImgObjDetectedType::ra), ""))
		return soap->error;
	if (soap_out_double(soap, "dec", -1, &(a->ns__ImgObjDetectedType::dec), ""))
		return soap->error;
	if (soap_out_double(soap, "mag", -1, &(a->ns__ImgObjDetectedType::mag), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ImgObjDetectedType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ImgObjDetectedType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ImgObjDetectedType * SOAP_FMAC4 soap_in_ns__ImgObjDetectedType(struct soap *soap, const char *tag, ns__ImgObjDetectedType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ImgObjDetectedType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ImgObjDetectedType, sizeof(ns__ImgObjDetectedType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ImgObjDetectedType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ImgObjDetectedType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_x1 = 1;
	size_t soap_flag_y1 = 1;
	size_t soap_flag_ra1 = 1;
	size_t soap_flag_dec1 = 1;
	size_t soap_flag_mag1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "id", &(a->ns__ImgObjDetectedType::id), "xsd:integer"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->ns__ImgObjDetectedType::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_x1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "x", &(a->ns__ImgObjDetectedType::x), "xsd:double"))
				{	soap_flag_x1--;
					continue;
				}
			if (soap_flag_y1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "y", &(a->ns__ImgObjDetectedType::y), "xsd:double"))
				{	soap_flag_y1--;
					continue;
				}
			if (soap_flag_ra1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ra", &(a->ns__ImgObjDetectedType::ra), "xsd:double"))
				{	soap_flag_ra1--;
					continue;
				}
			if (soap_flag_dec1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "dec", &(a->ns__ImgObjDetectedType::dec), "xsd:double"))
				{	soap_flag_dec1--;
					continue;
				}
			if (soap_flag_mag1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mag", &(a->ns__ImgObjDetectedType::mag), "xsd:double"))
				{	soap_flag_mag1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ImgObjDetectedType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ImgObjDetectedType, 0, sizeof(ns__ImgObjDetectedType), 0, soap_copy_ns__ImgObjDetectedType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_name1 > 0 || soap_flag_x1 > 0 || soap_flag_y1 > 0 || soap_flag_ra1 > 0 || soap_flag_dec1 > 0 || soap_flag_mag1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ImgObjDetectedType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ImgObjDetectedType);
	if (this->soap_out(soap, tag?tag:"ns:ImgObjDetectedType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ImgObjDetectedType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ImgObjDetectedType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ImgObjDetectedType * SOAP_FMAC4 soap_get_ns__ImgObjDetectedType(struct soap *soap, ns__ImgObjDetectedType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ImgObjDetectedType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ImgObjDetectedType * SOAP_FMAC2 soap_instantiate_ns__ImgObjDetectedType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ImgObjDetectedType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ImgObjDetectedType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ImgObjDetectedType);
		if (size)
			*size = sizeof(ns__ImgObjDetectedType);
		((ns__ImgObjDetectedType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ImgObjDetectedType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ImgObjDetectedType);
		for (int i = 0; i < n; i++)
			((ns__ImgObjDetectedType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ImgObjDetectedType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ImgObjDetectedType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ImgObjDetectedType %p -> %p\n", q, p));
	*(ns__ImgObjDetectedType*)p = *(ns__ImgObjDetectedType*)q;
}

void ns__ImgDataHeaderType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->ns__ImgDataHeaderType::ObjDetected);
	soap_default_xsd__integer(soap, &this->ns__ImgDataHeaderType::ObjMatched);
	soap_default_std__string(soap, &this->ns__ImgDataHeaderType::TargetName);
	soap_default_double(soap, &this->ns__ImgDataHeaderType::OrigRa);
	soap_default_double(soap, &this->ns__ImgDataHeaderType::OrigDec);
	soap_default_double(soap, &this->ns__ImgDataHeaderType::FieldWidth);
	soap_default_double(soap, &this->ns__ImgDataHeaderType::FieldHeight);
	soap_default_double(soap, &this->ns__ImgDataHeaderType::MinMag);
	soap_default_double(soap, &this->ns__ImgDataHeaderType::MaxMag);
	/* transient soap skipped */
}

void ns__ImgDataHeaderType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__integer(soap, &this->ns__ImgDataHeaderType::ObjDetected);
	soap_serialize_xsd__integer(soap, &this->ns__ImgDataHeaderType::ObjMatched);
	soap_serialize_std__string(soap, &this->ns__ImgDataHeaderType::TargetName);
	/* transient soap skipped */
}

int ns__ImgDataHeaderType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ImgDataHeaderType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ImgDataHeaderType(struct soap *soap, const char *tag, int id, const ns__ImgDataHeaderType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ImgDataHeaderType), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ObjDetected", -1, &(a->ns__ImgDataHeaderType::ObjDetected), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ObjMatched", -1, &(a->ns__ImgDataHeaderType::ObjMatched), ""))
		return soap->error;
	if (soap_out_std__string(soap, "TargetName", -1, &(a->ns__ImgDataHeaderType::TargetName), ""))
		return soap->error;
	if (soap_out_double(soap, "OrigRa", -1, &(a->ns__ImgDataHeaderType::OrigRa), ""))
		return soap->error;
	if (soap_out_double(soap, "OrigDec", -1, &(a->ns__ImgDataHeaderType::OrigDec), ""))
		return soap->error;
	if (soap_out_double(soap, "FieldWidth", -1, &(a->ns__ImgDataHeaderType::FieldWidth), ""))
		return soap->error;
	if (soap_out_double(soap, "FieldHeight", -1, &(a->ns__ImgDataHeaderType::FieldHeight), ""))
		return soap->error;
	if (soap_out_double(soap, "MinMag", -1, &(a->ns__ImgDataHeaderType::MinMag), ""))
		return soap->error;
	if (soap_out_double(soap, "MaxMag", -1, &(a->ns__ImgDataHeaderType::MaxMag), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ImgDataHeaderType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ImgDataHeaderType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ImgDataHeaderType * SOAP_FMAC4 soap_in_ns__ImgDataHeaderType(struct soap *soap, const char *tag, ns__ImgDataHeaderType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ImgDataHeaderType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ImgDataHeaderType, sizeof(ns__ImgDataHeaderType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ImgDataHeaderType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ImgDataHeaderType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ObjDetected1 = 1;
	size_t soap_flag_ObjMatched1 = 1;
	size_t soap_flag_TargetName1 = 1;
	size_t soap_flag_OrigRa1 = 1;
	size_t soap_flag_OrigDec1 = 1;
	size_t soap_flag_FieldWidth1 = 1;
	size_t soap_flag_FieldHeight1 = 1;
	size_t soap_flag_MinMag1 = 1;
	size_t soap_flag_MaxMag1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ObjDetected1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ObjDetected", &(a->ns__ImgDataHeaderType::ObjDetected), "xsd:integer"))
				{	soap_flag_ObjDetected1--;
					continue;
				}
			if (soap_flag_ObjMatched1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ObjMatched", &(a->ns__ImgDataHeaderType::ObjMatched), "xsd:integer"))
				{	soap_flag_ObjMatched1--;
					continue;
				}
			if (soap_flag_TargetName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "TargetName", &(a->ns__ImgDataHeaderType::TargetName), "xsd:string"))
				{	soap_flag_TargetName1--;
					continue;
				}
			if (soap_flag_OrigRa1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "OrigRa", &(a->ns__ImgDataHeaderType::OrigRa), "xsd:double"))
				{	soap_flag_OrigRa1--;
					continue;
				}
			if (soap_flag_OrigDec1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "OrigDec", &(a->ns__ImgDataHeaderType::OrigDec), "xsd:double"))
				{	soap_flag_OrigDec1--;
					continue;
				}
			if (soap_flag_FieldWidth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "FieldWidth", &(a->ns__ImgDataHeaderType::FieldWidth), "xsd:double"))
				{	soap_flag_FieldWidth1--;
					continue;
				}
			if (soap_flag_FieldHeight1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "FieldHeight", &(a->ns__ImgDataHeaderType::FieldHeight), "xsd:double"))
				{	soap_flag_FieldHeight1--;
					continue;
				}
			if (soap_flag_MinMag1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "MinMag", &(a->ns__ImgDataHeaderType::MinMag), "xsd:double"))
				{	soap_flag_MinMag1--;
					continue;
				}
			if (soap_flag_MaxMag1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "MaxMag", &(a->ns__ImgDataHeaderType::MaxMag), "xsd:double"))
				{	soap_flag_MaxMag1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ImgDataHeaderType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ImgDataHeaderType, 0, sizeof(ns__ImgDataHeaderType), 0, soap_copy_ns__ImgDataHeaderType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ObjDetected1 > 0 || soap_flag_ObjMatched1 > 0 || soap_flag_TargetName1 > 0 || soap_flag_OrigRa1 > 0 || soap_flag_OrigDec1 > 0 || soap_flag_FieldWidth1 > 0 || soap_flag_FieldHeight1 > 0 || soap_flag_MinMag1 > 0 || soap_flag_MaxMag1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ImgDataHeaderType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ImgDataHeaderType);
	if (this->soap_out(soap, tag?tag:"ns:ImgDataHeaderType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ImgDataHeaderType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ImgDataHeaderType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ImgDataHeaderType * SOAP_FMAC4 soap_get_ns__ImgDataHeaderType(struct soap *soap, ns__ImgDataHeaderType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ImgDataHeaderType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ImgDataHeaderType * SOAP_FMAC2 soap_instantiate_ns__ImgDataHeaderType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ImgDataHeaderType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ImgDataHeaderType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ImgDataHeaderType);
		if (size)
			*size = sizeof(ns__ImgDataHeaderType);
		((ns__ImgDataHeaderType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ImgDataHeaderType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ImgDataHeaderType);
		for (int i = 0; i < n; i++)
			((ns__ImgDataHeaderType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ImgDataHeaderType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ImgDataHeaderType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ImgDataHeaderType %p -> %p\n", q, p));
	*(ns__ImgDataHeaderType*)p = *(ns__ImgDataHeaderType*)q;
}

void ns__ResponseStatusType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns__ResponseStatusType::ResponseResult);
	soap_default_short(soap, &this->ns__ResponseStatusType::ResponseCode);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns__ResponseStatusType::ResponseMessage);
	/* transient soap skipped */
}

void ns__ResponseStatusType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->ns__ResponseStatusType::ResponseResult);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns__ResponseStatusType::ResponseMessage);
	/* transient soap skipped */
}

int ns__ResponseStatusType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ResponseStatusType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ResponseStatusType(struct soap *soap, const char *tag, int id, const ns__ResponseStatusType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ResponseStatusType), type))
		return soap->error;
	if (soap_out_std__string(soap, "ResponseResult", -1, &(a->ns__ResponseStatusType::ResponseResult), ""))
		return soap->error;
	if (soap_out_short(soap, "ResponseCode", -1, &(a->ns__ResponseStatusType::ResponseCode), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ResponseMessage", -1, &(a->ns__ResponseStatusType::ResponseMessage), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns__ResponseStatusType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ResponseStatusType(soap, tag, this, type);
}

SOAP_FMAC3 ns__ResponseStatusType * SOAP_FMAC4 soap_in_ns__ResponseStatusType(struct soap *soap, const char *tag, ns__ResponseStatusType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ResponseStatusType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ResponseStatusType, sizeof(ns__ResponseStatusType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ResponseStatusType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ResponseStatusType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResponseResult1 = 1;
	size_t soap_flag_ResponseCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResponseResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ResponseResult", &(a->ns__ResponseStatusType::ResponseResult), "xsd:string"))
				{	soap_flag_ResponseResult1--;
					continue;
				}
			if (soap_flag_ResponseCode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "ResponseCode", &(a->ns__ResponseStatusType::ResponseCode), "xsd:short"))
				{	soap_flag_ResponseCode1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ResponseMessage", &(a->ns__ResponseStatusType::ResponseMessage), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ResponseStatusType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ResponseStatusType, 0, sizeof(ns__ResponseStatusType), 0, soap_copy_ns__ResponseStatusType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResponseResult1 > 0 || soap_flag_ResponseCode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__ResponseStatusType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns__ResponseStatusType);
	if (this->soap_out(soap, tag?tag:"ns:ResponseStatusType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ResponseStatusType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ResponseStatusType(soap, this, tag, type);
}

SOAP_FMAC3 ns__ResponseStatusType * SOAP_FMAC4 soap_get_ns__ResponseStatusType(struct soap *soap, ns__ResponseStatusType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ResponseStatusType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ResponseStatusType * SOAP_FMAC2 soap_instantiate_ns__ResponseStatusType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ResponseStatusType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ResponseStatusType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ResponseStatusType);
		if (size)
			*size = sizeof(ns__ResponseStatusType);
		((ns__ResponseStatusType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns__ResponseStatusType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns__ResponseStatusType);
		for (int i = 0; i < n; i++)
			((ns__ResponseStatusType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns__ResponseStatusType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ResponseStatusType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ResponseStatusType %p -> %p\n", q, p));
	*(ns__ResponseStatusType*)p = *(ns__ResponseStatusType*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__integer, 0, sizeof(std::string), 0, soap_copy_xsd__integer);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns__ScopeFocusAdjust(struct soap *soap, struct __ns__ScopeFocusAdjust *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->input = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns__ScopeFocusAdjust(struct soap *soap, const struct __ns__ScopeFocusAdjust *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ScopeFocusAdjustRequestType(soap, &a->input);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns__ScopeFocusAdjust(struct soap *soap, const char *tag, int id, const struct __ns__ScopeFocusAdjust *a, const char *type)
{
	if (soap_out_PointerTons__ScopeFocusAdjustRequestType(soap, "input", -1, &a->input, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ScopeFocusAdjust * SOAP_FMAC4 soap_in___ns__ScopeFocusAdjust(struct soap *soap, const char *tag, struct __ns__ScopeFocusAdjust *a, const char *type)
{
	size_t soap_flag_input = 1;
	short soap_flag;
	a = (struct __ns__ScopeFocusAdjust *)soap_id_enter(soap, "", a, SOAP_TYPE___ns__ScopeFocusAdjust, sizeof(struct __ns__ScopeFocusAdjust), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns__ScopeFocusAdjust(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ScopeFocusAdjustRequestType(soap, "input", &a->input, "ns:ScopeFocusAdjustRequestType"))
				{	soap_flag_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns__ScopeFocusAdjust(struct soap *soap, const struct __ns__ScopeFocusAdjust *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns__ScopeFocusAdjust(soap, tag?tag:"-ns:ScopeFocusAdjust", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ScopeFocusAdjust * SOAP_FMAC4 soap_get___ns__ScopeFocusAdjust(struct soap *soap, struct __ns__ScopeFocusAdjust *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns__ScopeFocusAdjust(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns__ScopeFocusAdjust * SOAP_FMAC2 soap_instantiate___ns__ScopeFocusAdjust(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns__ScopeFocusAdjust(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns__ScopeFocusAdjust, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ScopeFocusAdjust);
		if (size)
			*size = sizeof(struct __ns__ScopeFocusAdjust);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ScopeFocusAdjust[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns__ScopeFocusAdjust);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns__ScopeFocusAdjust*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns__ScopeFocusAdjust(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns__ScopeFocusAdjust %p -> %p\n", q, p));
	*(struct __ns__ScopeFocusAdjust*)p = *(struct __ns__ScopeFocusAdjust*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns__CameraImageTake(struct soap *soap, struct __ns__CameraImageTake *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->input = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns__CameraImageTake(struct soap *soap, const struct __ns__CameraImageTake *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__CameraImageTakeRequestType(soap, &a->input);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns__CameraImageTake(struct soap *soap, const char *tag, int id, const struct __ns__CameraImageTake *a, const char *type)
{
	if (soap_out_PointerTons__CameraImageTakeRequestType(soap, "input", -1, &a->input, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__CameraImageTake * SOAP_FMAC4 soap_in___ns__CameraImageTake(struct soap *soap, const char *tag, struct __ns__CameraImageTake *a, const char *type)
{
	size_t soap_flag_input = 1;
	short soap_flag;
	a = (struct __ns__CameraImageTake *)soap_id_enter(soap, "", a, SOAP_TYPE___ns__CameraImageTake, sizeof(struct __ns__CameraImageTake), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns__CameraImageTake(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__CameraImageTakeRequestType(soap, "input", &a->input, "ns:CameraImageTakeRequestType"))
				{	soap_flag_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns__CameraImageTake(struct soap *soap, const struct __ns__CameraImageTake *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns__CameraImageTake(soap, tag?tag:"-ns:CameraImageTake", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__CameraImageTake * SOAP_FMAC4 soap_get___ns__CameraImageTake(struct soap *soap, struct __ns__CameraImageTake *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns__CameraImageTake(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns__CameraImageTake * SOAP_FMAC2 soap_instantiate___ns__CameraImageTake(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns__CameraImageTake(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns__CameraImageTake, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__CameraImageTake);
		if (size)
			*size = sizeof(struct __ns__CameraImageTake);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__CameraImageTake[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns__CameraImageTake);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns__CameraImageTake*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns__CameraImageTake(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns__CameraImageTake %p -> %p\n", q, p));
	*(struct __ns__CameraImageTake*)p = *(struct __ns__CameraImageTake*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns__ScopePositionGet(struct soap *soap, struct __ns__ScopePositionGet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->input = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns__ScopePositionGet(struct soap *soap, const struct __ns__ScopePositionGet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ScopePositionGetRequestType(soap, &a->input);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns__ScopePositionGet(struct soap *soap, const char *tag, int id, const struct __ns__ScopePositionGet *a, const char *type)
{
	if (soap_out_PointerTons__ScopePositionGetRequestType(soap, "input", -1, &a->input, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ScopePositionGet * SOAP_FMAC4 soap_in___ns__ScopePositionGet(struct soap *soap, const char *tag, struct __ns__ScopePositionGet *a, const char *type)
{
	size_t soap_flag_input = 1;
	short soap_flag;
	a = (struct __ns__ScopePositionGet *)soap_id_enter(soap, "", a, SOAP_TYPE___ns__ScopePositionGet, sizeof(struct __ns__ScopePositionGet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns__ScopePositionGet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ScopePositionGetRequestType(soap, "input", &a->input, "ns:ScopePositionGetRequestType"))
				{	soap_flag_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns__ScopePositionGet(struct soap *soap, const struct __ns__ScopePositionGet *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns__ScopePositionGet(soap, tag?tag:"-ns:ScopePositionGet", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ScopePositionGet * SOAP_FMAC4 soap_get___ns__ScopePositionGet(struct soap *soap, struct __ns__ScopePositionGet *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns__ScopePositionGet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns__ScopePositionGet * SOAP_FMAC2 soap_instantiate___ns__ScopePositionGet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns__ScopePositionGet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns__ScopePositionGet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ScopePositionGet);
		if (size)
			*size = sizeof(struct __ns__ScopePositionGet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ScopePositionGet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns__ScopePositionGet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns__ScopePositionGet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns__ScopePositionGet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns__ScopePositionGet %p -> %p\n", q, p));
	*(struct __ns__ScopePositionGet*)p = *(struct __ns__ScopePositionGet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns__ScopePositionSet(struct soap *soap, struct __ns__ScopePositionSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->input = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns__ScopePositionSet(struct soap *soap, const struct __ns__ScopePositionSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ScopePositionSetRequestType(soap, &a->input);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns__ScopePositionSet(struct soap *soap, const char *tag, int id, const struct __ns__ScopePositionSet *a, const char *type)
{
	if (soap_out_PointerTons__ScopePositionSetRequestType(soap, "input", -1, &a->input, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ScopePositionSet * SOAP_FMAC4 soap_in___ns__ScopePositionSet(struct soap *soap, const char *tag, struct __ns__ScopePositionSet *a, const char *type)
{
	size_t soap_flag_input = 1;
	short soap_flag;
	a = (struct __ns__ScopePositionSet *)soap_id_enter(soap, "", a, SOAP_TYPE___ns__ScopePositionSet, sizeof(struct __ns__ScopePositionSet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns__ScopePositionSet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ScopePositionSetRequestType(soap, "input", &a->input, "ns:ScopePositionSetRequestType"))
				{	soap_flag_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns__ScopePositionSet(struct soap *soap, const struct __ns__ScopePositionSet *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns__ScopePositionSet(soap, tag?tag:"-ns:ScopePositionSet", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ScopePositionSet * SOAP_FMAC4 soap_get___ns__ScopePositionSet(struct soap *soap, struct __ns__ScopePositionSet *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns__ScopePositionSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns__ScopePositionSet * SOAP_FMAC2 soap_instantiate___ns__ScopePositionSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns__ScopePositionSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns__ScopePositionSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ScopePositionSet);
		if (size)
			*size = sizeof(struct __ns__ScopePositionSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ScopePositionSet[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns__ScopePositionSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns__ScopePositionSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns__ScopePositionSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns__ScopePositionSet %p -> %p\n", q, p));
	*(struct __ns__ScopePositionSet*)p = *(struct __ns__ScopePositionSet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns__ImageSolve(struct soap *soap, struct __ns__ImageSolve *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns__ImageSolveRequest = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns__ImageSolve(struct soap *soap, const struct __ns__ImageSolve *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ImageSolveRequestType(soap, &a->ns__ImageSolveRequest);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns__ImageSolve(struct soap *soap, const char *tag, int id, const struct __ns__ImageSolve *a, const char *type)
{
	if (soap_out_PointerTons__ImageSolveRequestType(soap, "ns:ImageSolveRequest", -1, &a->ns__ImageSolveRequest, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ImageSolve * SOAP_FMAC4 soap_in___ns__ImageSolve(struct soap *soap, const char *tag, struct __ns__ImageSolve *a, const char *type)
{
	size_t soap_flag_ns__ImageSolveRequest = 1;
	short soap_flag;
	a = (struct __ns__ImageSolve *)soap_id_enter(soap, "", a, SOAP_TYPE___ns__ImageSolve, sizeof(struct __ns__ImageSolve), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns__ImageSolve(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns__ImageSolveRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ImageSolveRequestType(soap, "ns:ImageSolveRequest", &a->ns__ImageSolveRequest, "ns:ImageSolveRequestType"))
				{	soap_flag_ns__ImageSolveRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns__ImageSolve(struct soap *soap, const struct __ns__ImageSolve *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns__ImageSolve(soap, tag?tag:"-ns:ImageSolve", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns__ImageSolve * SOAP_FMAC4 soap_get___ns__ImageSolve(struct soap *soap, struct __ns__ImageSolve *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns__ImageSolve(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns__ImageSolve * SOAP_FMAC2 soap_instantiate___ns__ImageSolve(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns__ImageSolve(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns__ImageSolve, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ImageSolve);
		if (size)
			*size = sizeof(struct __ns__ImageSolve);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns__ImageSolve[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns__ImageSolve);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns__ImageSolve*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns__ImageSolve(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns__ImageSolve %p -> %p\n", q, p));
	*(struct __ns__ImageSolve*)p = *(struct __ns__ImageSolve*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ScopeFocusAdjustResponseType(struct soap *soap, ns__ScopeFocusAdjustResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ScopeFocusAdjustResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ScopeFocusAdjustResponseType(struct soap *soap, const char *tag, int id, ns__ScopeFocusAdjustResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ScopeFocusAdjustResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ScopeFocusAdjustResponseType ** SOAP_FMAC4 soap_in_PointerTons__ScopeFocusAdjustResponseType(struct soap *soap, const char *tag, ns__ScopeFocusAdjustResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ScopeFocusAdjustResponseType **)soap_malloc(soap, sizeof(ns__ScopeFocusAdjustResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ScopeFocusAdjustResponseType *)soap_instantiate_ns__ScopeFocusAdjustResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ScopeFocusAdjustResponseType ** p = (ns__ScopeFocusAdjustResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ScopeFocusAdjustResponseType, sizeof(ns__ScopeFocusAdjustResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ScopeFocusAdjustResponseType(struct soap *soap, ns__ScopeFocusAdjustResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ScopeFocusAdjustResponseType);
	if (soap_out_PointerTons__ScopeFocusAdjustResponseType(soap, tag?tag:"ns:ScopeFocusAdjustResponseType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ScopeFocusAdjustResponseType ** SOAP_FMAC4 soap_get_PointerTons__ScopeFocusAdjustResponseType(struct soap *soap, ns__ScopeFocusAdjustResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ScopeFocusAdjustResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ScopeFocusAdjustRequestType(struct soap *soap, ns__ScopeFocusAdjustRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ScopeFocusAdjustRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ScopeFocusAdjustRequestType(struct soap *soap, const char *tag, int id, ns__ScopeFocusAdjustRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ScopeFocusAdjustRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ScopeFocusAdjustRequestType ** SOAP_FMAC4 soap_in_PointerTons__ScopeFocusAdjustRequestType(struct soap *soap, const char *tag, ns__ScopeFocusAdjustRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ScopeFocusAdjustRequestType **)soap_malloc(soap, sizeof(ns__ScopeFocusAdjustRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ScopeFocusAdjustRequestType *)soap_instantiate_ns__ScopeFocusAdjustRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ScopeFocusAdjustRequestType ** p = (ns__ScopeFocusAdjustRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ScopeFocusAdjustRequestType, sizeof(ns__ScopeFocusAdjustRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ScopeFocusAdjustRequestType(struct soap *soap, ns__ScopeFocusAdjustRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ScopeFocusAdjustRequestType);
	if (soap_out_PointerTons__ScopeFocusAdjustRequestType(soap, tag?tag:"ns:ScopeFocusAdjustRequestType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ScopeFocusAdjustRequestType ** SOAP_FMAC4 soap_get_PointerTons__ScopeFocusAdjustRequestType(struct soap *soap, ns__ScopeFocusAdjustRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ScopeFocusAdjustRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__CameraImageTakeResponseType(struct soap *soap, ns__CameraImageTakeResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__CameraImageTakeResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__CameraImageTakeResponseType(struct soap *soap, const char *tag, int id, ns__CameraImageTakeResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__CameraImageTakeResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__CameraImageTakeResponseType ** SOAP_FMAC4 soap_in_PointerTons__CameraImageTakeResponseType(struct soap *soap, const char *tag, ns__CameraImageTakeResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__CameraImageTakeResponseType **)soap_malloc(soap, sizeof(ns__CameraImageTakeResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__CameraImageTakeResponseType *)soap_instantiate_ns__CameraImageTakeResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__CameraImageTakeResponseType ** p = (ns__CameraImageTakeResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__CameraImageTakeResponseType, sizeof(ns__CameraImageTakeResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__CameraImageTakeResponseType(struct soap *soap, ns__CameraImageTakeResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__CameraImageTakeResponseType);
	if (soap_out_PointerTons__CameraImageTakeResponseType(soap, tag?tag:"ns:CameraImageTakeResponseType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__CameraImageTakeResponseType ** SOAP_FMAC4 soap_get_PointerTons__CameraImageTakeResponseType(struct soap *soap, ns__CameraImageTakeResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__CameraImageTakeResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__CameraImageTakeRequestType(struct soap *soap, ns__CameraImageTakeRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__CameraImageTakeRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__CameraImageTakeRequestType(struct soap *soap, const char *tag, int id, ns__CameraImageTakeRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__CameraImageTakeRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__CameraImageTakeRequestType ** SOAP_FMAC4 soap_in_PointerTons__CameraImageTakeRequestType(struct soap *soap, const char *tag, ns__CameraImageTakeRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__CameraImageTakeRequestType **)soap_malloc(soap, sizeof(ns__CameraImageTakeRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__CameraImageTakeRequestType *)soap_instantiate_ns__CameraImageTakeRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__CameraImageTakeRequestType ** p = (ns__CameraImageTakeRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__CameraImageTakeRequestType, sizeof(ns__CameraImageTakeRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__CameraImageTakeRequestType(struct soap *soap, ns__CameraImageTakeRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__CameraImageTakeRequestType);
	if (soap_out_PointerTons__CameraImageTakeRequestType(soap, tag?tag:"ns:CameraImageTakeRequestType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__CameraImageTakeRequestType ** SOAP_FMAC4 soap_get_PointerTons__CameraImageTakeRequestType(struct soap *soap, ns__CameraImageTakeRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__CameraImageTakeRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ScopePositionGetResponseType(struct soap *soap, ns__ScopePositionGetResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ScopePositionGetResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ScopePositionGetResponseType(struct soap *soap, const char *tag, int id, ns__ScopePositionGetResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ScopePositionGetResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ScopePositionGetResponseType ** SOAP_FMAC4 soap_in_PointerTons__ScopePositionGetResponseType(struct soap *soap, const char *tag, ns__ScopePositionGetResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ScopePositionGetResponseType **)soap_malloc(soap, sizeof(ns__ScopePositionGetResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ScopePositionGetResponseType *)soap_instantiate_ns__ScopePositionGetResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ScopePositionGetResponseType ** p = (ns__ScopePositionGetResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ScopePositionGetResponseType, sizeof(ns__ScopePositionGetResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ScopePositionGetResponseType(struct soap *soap, ns__ScopePositionGetResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ScopePositionGetResponseType);
	if (soap_out_PointerTons__ScopePositionGetResponseType(soap, tag?tag:"ns:ScopePositionGetResponseType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ScopePositionGetResponseType ** SOAP_FMAC4 soap_get_PointerTons__ScopePositionGetResponseType(struct soap *soap, ns__ScopePositionGetResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ScopePositionGetResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ScopePositionGetRequestType(struct soap *soap, ns__ScopePositionGetRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ScopePositionGetRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ScopePositionGetRequestType(struct soap *soap, const char *tag, int id, ns__ScopePositionGetRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ScopePositionGetRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ScopePositionGetRequestType ** SOAP_FMAC4 soap_in_PointerTons__ScopePositionGetRequestType(struct soap *soap, const char *tag, ns__ScopePositionGetRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ScopePositionGetRequestType **)soap_malloc(soap, sizeof(ns__ScopePositionGetRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ScopePositionGetRequestType *)soap_instantiate_ns__ScopePositionGetRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ScopePositionGetRequestType ** p = (ns__ScopePositionGetRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ScopePositionGetRequestType, sizeof(ns__ScopePositionGetRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ScopePositionGetRequestType(struct soap *soap, ns__ScopePositionGetRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ScopePositionGetRequestType);
	if (soap_out_PointerTons__ScopePositionGetRequestType(soap, tag?tag:"ns:ScopePositionGetRequestType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ScopePositionGetRequestType ** SOAP_FMAC4 soap_get_PointerTons__ScopePositionGetRequestType(struct soap *soap, ns__ScopePositionGetRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ScopePositionGetRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ScopePositionSetResponseType(struct soap *soap, ns__ScopePositionSetResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ScopePositionSetResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ScopePositionSetResponseType(struct soap *soap, const char *tag, int id, ns__ScopePositionSetResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ScopePositionSetResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ScopePositionSetResponseType ** SOAP_FMAC4 soap_in_PointerTons__ScopePositionSetResponseType(struct soap *soap, const char *tag, ns__ScopePositionSetResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ScopePositionSetResponseType **)soap_malloc(soap, sizeof(ns__ScopePositionSetResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ScopePositionSetResponseType *)soap_instantiate_ns__ScopePositionSetResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ScopePositionSetResponseType ** p = (ns__ScopePositionSetResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ScopePositionSetResponseType, sizeof(ns__ScopePositionSetResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ScopePositionSetResponseType(struct soap *soap, ns__ScopePositionSetResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ScopePositionSetResponseType);
	if (soap_out_PointerTons__ScopePositionSetResponseType(soap, tag?tag:"ns:ScopePositionSetResponseType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ScopePositionSetResponseType ** SOAP_FMAC4 soap_get_PointerTons__ScopePositionSetResponseType(struct soap *soap, ns__ScopePositionSetResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ScopePositionSetResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ScopePositionSetRequestType(struct soap *soap, ns__ScopePositionSetRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ScopePositionSetRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ScopePositionSetRequestType(struct soap *soap, const char *tag, int id, ns__ScopePositionSetRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ScopePositionSetRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ScopePositionSetRequestType ** SOAP_FMAC4 soap_in_PointerTons__ScopePositionSetRequestType(struct soap *soap, const char *tag, ns__ScopePositionSetRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ScopePositionSetRequestType **)soap_malloc(soap, sizeof(ns__ScopePositionSetRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ScopePositionSetRequestType *)soap_instantiate_ns__ScopePositionSetRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ScopePositionSetRequestType ** p = (ns__ScopePositionSetRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ScopePositionSetRequestType, sizeof(ns__ScopePositionSetRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ScopePositionSetRequestType(struct soap *soap, ns__ScopePositionSetRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ScopePositionSetRequestType);
	if (soap_out_PointerTons__ScopePositionSetRequestType(soap, tag?tag:"ns:ScopePositionSetRequestType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ScopePositionSetRequestType ** SOAP_FMAC4 soap_get_PointerTons__ScopePositionSetRequestType(struct soap *soap, ns__ScopePositionSetRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ScopePositionSetRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ImageSolveResponseType(struct soap *soap, ns__ImageSolveResponseType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ImageSolveResponseType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ImageSolveResponseType(struct soap *soap, const char *tag, int id, ns__ImageSolveResponseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ImageSolveResponseType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ImageSolveResponseType ** SOAP_FMAC4 soap_in_PointerTons__ImageSolveResponseType(struct soap *soap, const char *tag, ns__ImageSolveResponseType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ImageSolveResponseType **)soap_malloc(soap, sizeof(ns__ImageSolveResponseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ImageSolveResponseType *)soap_instantiate_ns__ImageSolveResponseType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ImageSolveResponseType ** p = (ns__ImageSolveResponseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ImageSolveResponseType, sizeof(ns__ImageSolveResponseType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ImageSolveResponseType(struct soap *soap, ns__ImageSolveResponseType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ImageSolveResponseType);
	if (soap_out_PointerTons__ImageSolveResponseType(soap, tag?tag:"ns:ImageSolveResponseType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ImageSolveResponseType ** SOAP_FMAC4 soap_get_PointerTons__ImageSolveResponseType(struct soap *soap, ns__ImageSolveResponseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ImageSolveResponseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ImageSolveRequestType(struct soap *soap, ns__ImageSolveRequestType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ImageSolveRequestType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ImageSolveRequestType(struct soap *soap, const char *tag, int id, ns__ImageSolveRequestType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ImageSolveRequestType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ImageSolveRequestType ** SOAP_FMAC4 soap_in_PointerTons__ImageSolveRequestType(struct soap *soap, const char *tag, ns__ImageSolveRequestType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ImageSolveRequestType **)soap_malloc(soap, sizeof(ns__ImageSolveRequestType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ImageSolveRequestType *)soap_instantiate_ns__ImageSolveRequestType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ImageSolveRequestType ** p = (ns__ImageSolveRequestType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ImageSolveRequestType, sizeof(ns__ImageSolveRequestType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ImageSolveRequestType(struct soap *soap, ns__ImageSolveRequestType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ImageSolveRequestType);
	if (soap_out_PointerTons__ImageSolveRequestType(soap, tag?tag:"ns:ImageSolveRequestType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ImageSolveRequestType ** SOAP_FMAC4 soap_get_PointerTons__ImageSolveRequestType(struct soap *soap, ns__ImageSolveRequestType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ImageSolveRequestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ImgObjDetectedType(struct soap *soap, ns__ImgObjDetectedType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ImgObjDetectedType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ImgObjDetectedType(struct soap *soap, const char *tag, int id, ns__ImgObjDetectedType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ImgObjDetectedType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ImgObjDetectedType ** SOAP_FMAC4 soap_in_PointerTons__ImgObjDetectedType(struct soap *soap, const char *tag, ns__ImgObjDetectedType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ImgObjDetectedType **)soap_malloc(soap, sizeof(ns__ImgObjDetectedType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ImgObjDetectedType *)soap_instantiate_ns__ImgObjDetectedType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ImgObjDetectedType ** p = (ns__ImgObjDetectedType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ImgObjDetectedType, sizeof(ns__ImgObjDetectedType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ImgObjDetectedType(struct soap *soap, ns__ImgObjDetectedType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ImgObjDetectedType);
	if (soap_out_PointerTons__ImgObjDetectedType(soap, tag?tag:"ns:ImgObjDetectedType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ImgObjDetectedType ** SOAP_FMAC4 soap_get_PointerTons__ImgObjDetectedType(struct soap *soap, ns__ImgObjDetectedType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ImgObjDetectedType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ImgDataHeaderType(struct soap *soap, ns__ImgDataHeaderType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ImgDataHeaderType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ImgDataHeaderType(struct soap *soap, const char *tag, int id, ns__ImgDataHeaderType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ImgDataHeaderType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ImgDataHeaderType ** SOAP_FMAC4 soap_in_PointerTons__ImgDataHeaderType(struct soap *soap, const char *tag, ns__ImgDataHeaderType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ImgDataHeaderType **)soap_malloc(soap, sizeof(ns__ImgDataHeaderType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ImgDataHeaderType *)soap_instantiate_ns__ImgDataHeaderType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ImgDataHeaderType ** p = (ns__ImgDataHeaderType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ImgDataHeaderType, sizeof(ns__ImgDataHeaderType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ImgDataHeaderType(struct soap *soap, ns__ImgDataHeaderType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ImgDataHeaderType);
	if (soap_out_PointerTons__ImgDataHeaderType(soap, tag?tag:"ns:ImgDataHeaderType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ImgDataHeaderType ** SOAP_FMAC4 soap_get_PointerTons__ImgDataHeaderType(struct soap *soap, ns__ImgDataHeaderType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ImgDataHeaderType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ResponseStatusType(struct soap *soap, ns__ResponseStatusType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ResponseStatusType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ResponseStatusType(struct soap *soap, const char *tag, int id, ns__ResponseStatusType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ResponseStatusType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ResponseStatusType ** SOAP_FMAC4 soap_in_PointerTons__ResponseStatusType(struct soap *soap, const char *tag, ns__ResponseStatusType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ResponseStatusType **)soap_malloc(soap, sizeof(ns__ResponseStatusType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ResponseStatusType *)soap_instantiate_ns__ResponseStatusType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ResponseStatusType ** p = (ns__ResponseStatusType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ResponseStatusType, sizeof(ns__ResponseStatusType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ResponseStatusType(struct soap *soap, ns__ResponseStatusType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ResponseStatusType);
	if (soap_out_PointerTons__ResponseStatusType(soap, tag?tag:"ns:ResponseStatusType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ResponseStatusType ** SOAP_FMAC4 soap_get_PointerTons__ResponseStatusType(struct soap *soap, ns__ResponseStatusType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ResponseStatusType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons__ImgObjDetectedType(struct soap *soap, std::vector<ns__ImgObjDetectedType * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons__ImgObjDetectedType(struct soap *soap, const std::vector<ns__ImgObjDetectedType * >*a)
{
	for (std::vector<ns__ImgObjDetectedType * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons__ImgObjDetectedType(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons__ImgObjDetectedType(struct soap *soap, const char *tag, int id, const std::vector<ns__ImgObjDetectedType * >*a, const char *type)
{
	for (std::vector<ns__ImgObjDetectedType * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons__ImgObjDetectedType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns__ImgObjDetectedType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons__ImgObjDetectedType(struct soap *soap, const char *tag, std::vector<ns__ImgObjDetectedType * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons__ImgObjDetectedType(soap, -1)))
		return NULL;
	ns__ImgObjDetectedType *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__ImgObjDetectedType, SOAP_TYPE_std__vectorTemplateOfPointerTons__ImgObjDetectedType, sizeof(ns__ImgObjDetectedType), 1))
				break;
			if (!soap_in_PointerTons__ImgObjDetectedType(soap, tag, NULL, "ns:ImgObjDetectedType"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons__ImgObjDetectedType(soap, tag, &n, "ns:ImgObjDetectedType"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns__ImgObjDetectedType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons__ImgObjDetectedType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons__ImgObjDetectedType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons__ImgObjDetectedType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__ImgObjDetectedType * >);
		if (size)
			*size = sizeof(std::vector<ns__ImgObjDetectedType * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__ImgObjDetectedType * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns__ImgObjDetectedType * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns__ImgObjDetectedType * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons__ImgObjDetectedType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns__ImgObjDetectedType * > %p -> %p\n", q, p));
	*(std::vector<ns__ImgObjDetectedType * >*)p = *(std::vector<ns__ImgObjDetectedType * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
