////////////////////////////////////////////////////////////////////
// Package:		Config implementation
// File:		config.cpp
// Purpose:		manage software configuration from to file/argv
//
// Created by:	Larry Lart on 24/06/2007
// Updated by:	Larry Lart on 05/07/2008
//				Larry Lart on 20/01/2010 - added language
//
// Copyright:	(c) 2007-2010 Larry Lart
// Licence:		Digital Entity
////////////////////////////////////////////////////////////////////

// system headers
#include <atlbase.h>
#include <tchar.h>
#include <windows.h>
#include <vector>
#include <list>
#include <limits>
#include <algorithm>
#include <functional>
#include <numeric>

#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>

// custom
#ifdef _WINDOWS
#include "../util/func.h"
#endif

// wxwindows includes
#include "wx/wxprec.h"
#include <wx/string.h>
#include <wx/regex.h>
#ifndef  WX_PRECOMP
  #include "wx/wx.h"
#endif //precompiled headers

// custom headers
#include "../unimap.h"
#include "../sky/sky.h"
#include "../sky/sky_finder.h"
#include "../sky/catalog_stars.h"
#include "../sky/catalog_dso.h"
#include "../match/atpmatch.h"
#include "../gui/groupdlg.h"

// main header
#include "mainconfig.h"

/////////////////////////////////////////////////////////////////////
// Method:	Constructor
// Class:	CConfigMain
// Purpose:	intialize my object
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
CConfigMain::CConfigMain( const wxString& strPath, const wxString& strName ) : CConfig( strPath, strName )
{

	// set my default labels( hard coded for now)
	m_vectSectionDef.Insert( wxT("Gui"), SECTION_ID_GUI );
	m_vectSectionDef.Insert( wxT("Style"), SECTION_ID_STYLE );
	m_vectSectionDef.Insert( wxT("Action"), SECTION_ID_ACTION );
	m_vectSectionDef.Insert( wxT("Detection"), SECTION_ID_DETECTION );
	m_vectSectionDef.Insert( wxT("Matching"), SECTION_ID_MATCHING );
	m_vectSectionDef.Insert( wxT("Catalog"), SECTION_ID_CATALOG );
	m_vectSectionDef.Insert( wxT("Hint"), SECTION_ID_HINT );
	m_vectSectionDef.Insert( wxT("Graphics"), SECTION_ID_GRAHIPCS );
	m_vectSectionDef.Insert( wxT("Gui3D"), SECTION_ID_GUI3D );
	m_vectSectionDef.Insert( wxT("SlideShow"), SECTION_ID_SLIDESHOW );
	m_vectSectionDef.Insert( wxT("Application"), SECTION_ID_APPLICATION );
	m_vectSectionDef.Insert( wxT("Services"), SECTION_ID_SERVICES );

	// detection section defines
	AddVar( SECTION_ID_DETECTION, CONF_DETECTION_PROFILE, "UseProfileId", VAR_TYPE_INTEGER );

	//////////////////////////////
	// SECTION :: SERVICES
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_SERVER_RUN, "EnableSoapServices", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_SERVER_IP, "SoapServerIp", VAR_TYPE_STRING );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_SERVER_PORT, "SoapServerPort", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_PROCESSING_QUEUE, "DistributedProccesingQueue", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_PROCESSING_PIORITY, "DistributedProccesingPriority", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_CLUSTER_NODE_ID, "ClusterNodeId", VAR_TYPE_STRING );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_CLUSTER_MASTER_IP, "ClusterMasterIp", VAR_TYPE_STRING );
	AddVar( SECTION_ID_SERVICES, CONF_SERVICES_CLUSTER_MASTER_PORT, "ClusterMasterPort", VAR_TYPE_INTEGER );

	////////////////
	// Matching section defines
	AddVar( SECTION_ID_APPLICATION, CONF_APPLICATION_ID, "AppId", VAR_TYPE_STRING );
	AddVar( SECTION_ID_APPLICATION, CONF_APPLICATION_VER, "AppVer", VAR_TYPE_STRING );

	////////////////
	// Matching section defines
	// :: MATCH :: search
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_METHOD, "SearchMethod", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_RA, "SearchAreaIncrementOnRA", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_DEC, "SearchAreaIncrementOnDEC", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_RA, "RaSearchOverlapDivision", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_DEC, "DecSearchOverlapDivision", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_STEPS, "SearchZoomSteps", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_START, "SearchZoomStart", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_REVERSE_ZOOM_SEARCH, "ReverseZoomSearch", VAR_TYPE_INTEGER );
	// :: MATCH :: objects
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_OBJ_SHAPE, "ImgObjectExtractByObjectShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_DETECT_TYPE, "ImgObjectExtractByDetectType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_NO, "UseImgObjNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_CAT_OBJ_NO, "UseCatObjNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_USE_MIN_CAT_STARS, "MatchUseMinCatStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_MIN_STARS, "FirstLevelMinStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_IMAGE_STARS_FACT, "FineTuneImgStarsFactor", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_CATALOG_STARS_FACT, "FineTuneCatStarsFactor", VAR_TYPE_FLOAT );
	// :: MATCH :: match
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_TRANS_TYPE, "TransType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_RECALC, "DoRecalc", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_DIST, "MaxDist", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_FIT, "TriangFit", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_SCALE, "TriangScale", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_ITER, "MaxRecursive", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_HALT_SIGMA, "HSTolerance", VAR_TYPE_FLOAT );
	// :: MATCH :: proc
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_PROJECTION_METHOD, "ProjectionMethod", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE, "DoFineTune", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE_WITH_PRJ, "DoFineTuneWithPrj", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_MOST_STARS, "MatchByMostStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_BEST_FIT, "MatchByBestFit", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_REFINE_BEST_AREA, "RefineBestArea", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_STOP_ON_FIRST_FOUND, "StopOnFirstFound", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_MIN_FOUND_NEEDED, "MinFoundNeeded", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_ASSOC_MAX_DISTANCE, "MatchAssocMaxDistance", VAR_TYPE_FLOAT );
	// :: MATCH :: finder
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_CAT_STARS, "LocateCatStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_DSO, "LocateDso", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_XGAMMA, "LocateXGamma", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_RADIO, "LocateRadio", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_SN, "LocateSupernovas", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_BH, "LocateBlackholes", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_MSTARS, "LocateMStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_EXOPLANETS, "LocateExoplanets", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_ASTEROIDS, "LocateAsteroids", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_COMETS, "LocateComets", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_AES, "LocateAes", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_SOLAR, "LocateSolar", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_FETCH_OBJ_DETAILS_ON_FIND, "FetchDetailsOnObjFind", VAR_TYPE_INTEGER );
	// :: MATCH :: solar
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TIMEFRAME_RANGE, "LocateTimeFrameRange", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TIMEFRAME_DIV, "LocateTimeFrameDiv", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_USE_TLE_IN_RANGE, "LocateUseTleInRange", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TLE_RANGE_VALUE, "LocateTleRangeValue", VAR_TYPE_INTEGER );

	///////////////////
	// CATALOGS section defines
	// :: stars
	AddVar( SECTION_ID_CATALOG, CONF_STARS_CATALOG_TO_USE, "StarsCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REGION, "LoadStarsCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_STARS_CATALOG_MAG_LIMIT, "StarsCatMaxMagLimit", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REMOTE, "LoadStarsCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REMOTE_LOCATION, "LoadStarsCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: dso
	AddVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_TO_USE, "DsoCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REGION, "LoadDsoCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REMOTE, "LoadDsoCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REMOTE_LOCATION, "LoadDsoCatRemoteLocation", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_MESSIER, "UseDsoCatMessier", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_NGC, "UseDsoCatNgc", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_IC, "UseDsoCatIc", VAR_TYPE_INTEGER );
	// :: radio
	AddVar( SECTION_ID_CATALOG, CONF_RADIO_CATALOG_TO_USE, "RadioCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REGION, "LoadRadioCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REMOTE, "LoadRadioCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REMOTE_LOCATION, "LoadRadioCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: x-ray/gamma
	AddVar( SECTION_ID_CATALOG, CONF_XGAMMA_CATALOG_TO_USE, "XGammaCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REGION, "LoadXGammaCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REMOTE, "LoadXGammaCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REMOTE_LOCATION, "LoadXGammaCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: supernovas
	AddVar( SECTION_ID_CATALOG, CONF_SN_CATALOG_TO_USE, "SNCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REGION, "LoadSNCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REMOTE, "LoadSNCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REMOTE_LOCATION, "LoadSNCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: blackholes
	AddVar( SECTION_ID_CATALOG, CONF_BH_CATALOG_TO_USE, "BHCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REGION, "LoadBHCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REMOTE, "LoadBHCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REMOTE_LOCATION, "LoadBHCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: multiple/double stars
	AddVar( SECTION_ID_CATALOG, CONF_MS_CATALOG_TO_USE, "MSCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REGION, "LoadMSCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REMOTE, "LoadMSCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REMOTE_LOCATION, "LoadMSCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: extra-solar planets
	AddVar( SECTION_ID_CATALOG, CONF_EXP_CATALOG_TO_USE, "EXPCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REGION, "LoadEXPCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REMOTE, "LoadEXPCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REMOTE_LOCATION, "LoadEXPCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: asteroids
	AddVar( SECTION_ID_CATALOG, CONF_AST_CATALOG_TO_USE, "ASTCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REGION, "LoadASTCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REMOTE, "LoadASTCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REMOTE_LOCATION, "LoadASTCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: comets
	AddVar( SECTION_ID_CATALOG, CONF_COM_CATALOG_TO_USE, "COMCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REGION, "LoadCOMCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REMOTE, "LoadCOMCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REMOTE_LOCATION, "LoadCOMCatRemoteLocation", VAR_TYPE_INTEGER );
	// :: artificial earth satellites
	AddVar( SECTION_ID_CATALOG, CONF_AES_CATALOG_TO_USE, "AESCatalogToUse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_TIMEFRAME, "LoadAESCatOnlyInUseTimeFrame", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REGION, "LoadAESCatRegionOnly", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE, "LoadAESCatRemote", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE_LOCATION, "LoadAESCatRemoteLocation", VAR_TYPE_INTEGER );
	// - new stuff
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE_UPDATE_LOCAL, "LoadAESRemoteUpdateLocal", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_OBJ_CATEGORY, "AESFilterObjectCategory", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_OBJ_TYPE, "AESFilterObjectType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DONT_USE_TYPE, "AESFilterDontUseType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_DATE_START, "AESFilterRecUseDateStart", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DATE_START, "AESFilterRecDateStart", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_DATE_END, "AESFilterRecUseDateEnd", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DATE_END, "AESFilterRecDateEnd", VAR_TYPE_FLOAT );

	/////////////////////
	// Hint section defines
	AddVar( SECTION_ID_HINT, CONF_HINT_USE_FIELD_TYPE, "UseFieldType", VAR_TYPE_INTEGER );
	// camera
	AddVar( SECTION_ID_HINT, CONF_HINT_CAMERA_OWN, "CameraOwn", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_CAMERA_TYPE, "CameraType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_CAMERA_BRAND, "CameraBrand", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_CAMERA_NAME, "CameraName", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_SENSOR_WIDTH, "SensorWidth", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_HINT, CONF_HINT_SENSOR_HEIGHT, "SensorHeight", VAR_TYPE_FLOAT );
	// telescope/lens
	AddVar( SECTION_ID_HINT, CONF_HINT_TLENS_OWN, "TLensOwn", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_TLENS_TYPE, "TLensType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_TLENS_TYPE_OF_TYPE, "TLensTypeOfType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_TLENS_BRAND, "TLensBrand", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_TLENS_NAME, "TLensName", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_FOCAL_LENGTH, "FocalLength", VAR_TYPE_FLOAT );
	// field
	AddVar( SECTION_ID_HINT, CONF_HINT_FIELD_UNITS, "FieldUnits", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_HINT, CONF_HINT_FIELD_WIDTH, "FieldWidth", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_HINT, CONF_HINT_FIELD_HEIGHT, "FieldHeight", VAR_TYPE_FLOAT );

	///////////////////////
	// GUI section define
	AddVar( SECTION_ID_GUI, CONF_GUI_WIDTH, "Width", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_GUI_HEIGHT, "Height", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_GUI_ORIG_X, "OrigX", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_GUI_ORIG_Y, "OrigY", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_LOGS_VIEW, "ViewLogs", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_ADD_FILE_PATH, "LastImgPath", VAR_TYPE_STRING );
	AddVar( SECTION_ID_GUI, CONF_LAST_GROUP, "LastGroup", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_LAST_GROUP_IMAGE, "LastGroupImg", VAR_TYPE_INTEGER );
	// :: VIEW :: objects
	AddVar( SECTION_ID_GUI, CONF_VIEW_OBJECTS_TYPE, "ViewObjectsType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_DETECTED_OBJECTS, "ViewDetectedObjects", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_DETECTED_OBJECTS_NO_MATCH, "ViewDetectedObjectsNoMatch", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_STARS, "ViewCatalogStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_DSO, "ViewCatalogDso", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_XGAMMA, "ViewCatalogXGamma", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_RADIO, "ViewCatalogRadio", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_MSTARS, "ViewCatalogMStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_SUPERNOVAS, "ViewCatalogSN", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_BLACKHOLES, "ViewCatalogBH", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_EXOPLANETS, "ViewCatalogExoplanets", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_ASTERIODS, "ViewCatalogAsteroids", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_COMETS, "ViewCatalogComets", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_AES, "ViewCatalogAes", VAR_TYPE_INTEGER );
	// :: constellations
	AddVar( SECTION_ID_GUI, CONF_CONSTL_VIEW, "ViewConstellations", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_CONSTL_CULTURE, "ConstlCulture", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_CONSTL_VERSION, "ConstlVersion", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_CONSTL_LINES, "ConstlLines", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_CONSTL_LABEL, "ConstlLabel", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI, CONF_CONSTL_ARTWORK, "ConstlArtwork", VAR_TYPE_INTEGER );
	// areas
	AddVar( SECTION_ID_GUI, CONF_VIEW_IMAGE_AREAS, "ViewImageAreas", VAR_TYPE_INTEGER );
	// thumbnails
	AddVar( SECTION_ID_GUI, CONF_VIEW_GROUP_IMAGE_THUMBNAILS, "ViewThumbnails", VAR_TYPE_INTEGER );

	///////////////////////
	// GUI section define
	// colmap :: light
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_LIGHTING_AMBIENT, "ColMapLightingAmbient", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_LIGHTING_DIFFUSE, "ColMapLightingDiffuse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_LIGHTING_SPECULAR, "ColMapLightingSpecular", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_LIGHT_COORD_X, "ColMapLightCoordX", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_LIGHT_COORD_Y, "ColMapLightCoordY", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_LIGHT_COORD_Z, "ColMapLightCoordZ", VAR_TYPE_INTEGER );
	// colmap :: materials
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_MATERIAL_AMBIENT, "ColMapMaterialAmbient", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_MATERIAL_DIFFUSE, "ColMapMaterialDiffuse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_MATERIAL_SPECULAR, "ColMapMaterialSpecular", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_MATERIAL_SHININESS, "ColMapMaterialShininess", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_MATERIAL_EMISSION, "ColMapMaterialEmission", VAR_TYPE_INTEGER );
	// colmap :: structure
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_SURFACE_WIDTH, "ColMapStructureSurfaceWidth", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_SURFACE_HEIGHT, "ColMapStructureSurfaceHeight", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_GRID_SPACER, "ColMapStructureGridSpacer", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_SURFACE_SPACER, "ColMapStructureSurfaceSpacer", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_Z_FACTOR, "ColMapStructureZFactor", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_GRID_LABELS, "ColMapStructureGridLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_SURFACE_LABELS, "ColMapStructureSurfaceLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_SHOW_AXIS, "ColMapShowAxis", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_COLMAP_STRUCT_SHOW_PROJECTIONS, "ColMapShowProjections", VAR_TYPE_INTEGER );
	// space :: light
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_LIGHTING_AMBIENT, "SpaceLightingAmbient", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_LIGHTING_DIFFUSE, "SpaceLightingDiffuse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_LIGHTING_SPECULAR, "SpaceLightingSpecular", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_LIGHT_COORD_X, "SpaceLightCoordX", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_LIGHT_COORD_Y, "SpaceLightCoordY", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_LIGHT_COORD_Z, "SpaceLightCoordZ", VAR_TYPE_INTEGER );
	// space :: materials
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_MATERIAL_AMBIENT, "SpaceMaterialAmbient", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_MATERIAL_DIFFUSE, "SpaceMaterialDiffuse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_MATERIAL_SPECULAR, "SpaceMaterialSpecular", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_MATERIAL_SHININESS, "SpaceMaterialShininess", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_MATERIAL_EMISSION, "SpaceMaterialEmission", VAR_TYPE_INTEGER );
	// space :: structure
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_SURFACE_WIDTH, "SpaceStructureSurfaceWidth", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_SURFACE_HEIGHT, "SpaceStructureSurfaceHeight", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_GRID_SPACER, "SpaceStructureGridSpacer", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_SURFACE_SPACER, "SpaceStructureSurfaceSpacer", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_Z_FACTOR, "SpaceStructureZFactor", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_GRID_LABELS, "SpaceStructureGridLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_SURFACE_LABELS, "SpaceStructureSurfaceLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_SHOW_AXIS, "SpaceShowAxis", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_SPACE_STRUCT_SHOW_PROJECTIONS, "SpaceShowProjections", VAR_TYPE_INTEGER );
	// dist :: light
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_LIGHTING_AMBIENT, "DistLightingAmbient", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_LIGHTING_DIFFUSE, "DistLightingDiffuse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_LIGHTING_SPECULAR, "DistLightingSpecular", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_LIGHT_COORD_X, "DistLightCoordX", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_LIGHT_COORD_Y, "DistLightCoordY", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_LIGHT_COORD_Z, "DistLightCoordZ", VAR_TYPE_INTEGER );
	// dist :: materials
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_MATERIAL_AMBIENT, "DistMaterialAmbient", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_MATERIAL_DIFFUSE, "DistMaterialDiffuse", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_MATERIAL_SPECULAR, "DistMaterialSpecular", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_MATERIAL_SHININESS, "DistMaterialShininess", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_MATERIAL_EMISSION, "DistMaterialEmission", VAR_TYPE_INTEGER );
	// dist :: structure
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_SURFACE_WIDTH, "DistStructureSurfaceWidth", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_SURFACE_HEIGHT, "DistStructureSurfaceHeight", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_GRID_SPACER, "DistStructureGridSpacer", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_SURFACE_SPACER, "DistStructureSurfaceSpacer", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_Z_FACTOR, "DistStructureZFactor", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_GRID_LABELS, "DistStructureGridLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_SURFACE_LABELS, "DistStructureSurfaceLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_SHOW_AXIS, "DistShowAxis", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GUI3D, CONF_GUI_3D_DIST_STRUCT_SHOW_PROJECTIONS, "DistShowProjections", VAR_TYPE_INTEGER );

	/////////////////////////
	// Style section define
	AddVar( SECTION_ID_STYLE, CONF_STYLE_FONT_ENCODING, "FontEncoding", VAR_TYPE_INTEGER );
	// :: detected
	AddVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_DESC, "DFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_COLOR, "DFontCol", VAR_TYPE_STRING );
	// :: matched
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_DESC, "MFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_COLOR, "MFontCol", VAR_TYPE_STRING );
	// :: catalog
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_DESC, "CFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_COLOR, "CFontCol", VAR_TYPE_STRING );
	// :: nebula
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_DESC, "NebFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_COLOR, "NebFontCol", VAR_TYPE_STRING );
	// :: cluster
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_DESC, "CluFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_COLOR, "CluFontCol", VAR_TYPE_STRING );
	// :: galaxy
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_DESC, "GalFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_COLOR, "GalFontCol", VAR_TYPE_STRING );
	// :: supernovae
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_DESC, "SNFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_COLOR, "SNFontCol", VAR_TYPE_STRING );
	// :: black holes
	AddVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_DESC, "BHFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_COLOR, "BHFontCol", VAR_TYPE_STRING );
	// :: radio
	AddVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_DESC, "RadFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_COLOR, "RadFontCol", VAR_TYPE_STRING );
	// :: x-ray
	AddVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_DESC, "XRayFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_COLOR, "XRayFontCol", VAR_TYPE_STRING );
	// :: gamma
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_DESC, "GammaFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_COLOR, "GammaFontCol", VAR_TYPE_STRING );
	// :: multiple/double stars
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_DESC, "MSFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_COLOR, "MSFontCol", VAR_TYPE_STRING );
	// :: asteroids
	AddVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_DESC, "ASTFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_COLOR, "ASTFontCol", VAR_TYPE_STRING );
	// :: comets
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_DESC, "COMFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_COLOR, "COMFontCol", VAR_TYPE_STRING );
	// :: extrasolar planets
	AddVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_DESC, "EXPFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_COLOR, "EXPFontCol", VAR_TYPE_STRING );
	// :: artificial eart satellites
	AddVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_DESC, "AESFontDesc", VAR_TYPE_STRING );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_COLOR, "AESFontCol", VAR_TYPE_STRING );

	///////////
	// and label structure
	// :: detected
	AddVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_ID, "DLabelUseId", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_MAG, "DLabelUseMag", VAR_TYPE_INTEGER );
	// :: matched
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_ID, "MLabelUseId", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CATNO, "MLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CNAME, "MLabelUseCName", VAR_TYPE_INTEGER );
	// :: catalog
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CATNO, "CLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CNAME, "CLabelUseCName", VAR_TYPE_INTEGER );
	// :: nebula
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CATNO, "NebLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CNAME, "NebLabelUseCName", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_TYPE, "NebLabelUseType", VAR_TYPE_INTEGER );
	// :: clusters
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CATNO, "CluLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CNAME, "CluLabelUseCName", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_TYPE, "CluLabelUseType", VAR_TYPE_INTEGER );
	// :: galaxy
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CATNO, "GalLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CNAME, "GalLabelUseCName", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_TYPE, "GalLabelUseType", VAR_TYPE_INTEGER );
	// :: supernovae
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CATNO, "SNLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CNAME, "SNLabelUseCName", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_TYPE, "SNLabelUseType", VAR_TYPE_INTEGER );
	// :: black holes
	AddVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_CATNO, "BHLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_TYPE, "BHLabelUseType", VAR_TYPE_INTEGER );
	// :: radio
	AddVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_CATNO, "RadLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_TYPE, "RadLabelUseType", VAR_TYPE_INTEGER );
	// :: x-ray
	AddVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_CATNO, "XRayLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_TYPE, "XRayLabelUseType", VAR_TYPE_INTEGER );
	// :: gamma
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_CATNO, "GammaLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_TYPE, "GammaLabelUseType", VAR_TYPE_INTEGER );
	// :: multiple/double stars
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_CATNO, "MSLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_TYPE, "MSLabelUseType", VAR_TYPE_INTEGER );
	// :: asteroids
	AddVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_CATNO, "ASTLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_TYPE, "ASTLabelUseType", VAR_TYPE_INTEGER );
	// :: comets
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_CATNO, "COMLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_TYPE, "COMLabelUseType", VAR_TYPE_INTEGER );
	// :: extrasolar planets
	AddVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_CATNO, "EXPLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_TYPE, "EXPLabelUseType", VAR_TYPE_INTEGER );
	// :: artificial eart satellites
	AddVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_CATNO, "AESLabelUseCatNo", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_TYPE, "AESLabelUseType", VAR_TYPE_INTEGER );

	//////////////////
	// units and coordinate system
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_DISPLAY_FORMAT, "SkyCoordDisplayFormat", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_ENTRY_FORMAT, "SkyCoordEntryFormat", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COORD_SYSTEM, "CoordSystem", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GUI_LANGUAGE, "GuiLanguage", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GUI_THEME, "GuiTheme", VAR_TYPE_INTEGER );

	///////////
	// shapes and lines
	// :: detected
	AddVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_SHAPE_TYPE, "DObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_SHAPE_LINE, "DObjLine", VAR_TYPE_INTEGER );
	// :: matched
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_SHAPE_TYPE, "MObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_SHAPE_LINE, "MObjLine", VAR_TYPE_INTEGER );
	// :: catalog
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_SHAPE_TYPE, "CObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_SHAPE_LINE, "CObjLine", VAR_TYPE_INTEGER );
	// :: nebula
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_SHAPE_TYPE, "NebObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_SHAPE_LINE, "NebObjLine", VAR_TYPE_INTEGER );
	// :: clusters
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_SHAPE_TYPE, "CluObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_SHAPE_LINE, "CluObjLine", VAR_TYPE_INTEGER );
	// :: galaxy
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_SHAPE_TYPE, "GalObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_SHAPE_LINE, "GalObjLine", VAR_TYPE_INTEGER );
	// :: supernovaes
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_SHAPE_TYPE, "SNObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_SHAPE_LINE, "SNObjLine", VAR_TYPE_INTEGER );
	// :: black holes
	AddVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_SHAPE_TYPE, "BHObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_SHAPE_LINE, "BHObjLine", VAR_TYPE_INTEGER );
	// :: radio 
	AddVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_SHAPE_TYPE, "RadObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_SHAPE_LINE, "RadObjLine", VAR_TYPE_INTEGER );
	// :: x-ray 
	AddVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_SHAPE_TYPE, "XRayObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_SHAPE_LINE, "XRayObjLine", VAR_TYPE_INTEGER );
	// :: gamma 
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_SHAPE_TYPE, "GammaObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_SHAPE_LINE, "GammaObjLine", VAR_TYPE_INTEGER );
	// :: multiple/double stars
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_SHAPE_TYPE, "MSObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_SHAPE_LINE, "MSObjLine", VAR_TYPE_INTEGER );
	// :: asteroids
	AddVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_SHAPE_TYPE, "ASTObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_SHAPE_LINE, "ASTObjLine", VAR_TYPE_INTEGER );
	// :: comets
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_SHAPE_TYPE, "COMObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_SHAPE_LINE, "COMObjLine", VAR_TYPE_INTEGER );
	// :: extrasolar planets
	AddVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_SHAPE_TYPE, "EXPObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_SHAPE_LINE, "EXPObjLine", VAR_TYPE_INTEGER );
	// :: artificial eart satellites
	AddVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_SHAPE_TYPE, "AESObjShape", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_SHAPE_LINE, "AESObjLine", VAR_TYPE_INTEGER );

	//////////////////////////////
	// SECTION :: AUTOS
	AddVar( SECTION_ID_ACTION, CONF_ACTION_SAVE_ON_DETECTION, "SaveOnDetection", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_ACTION, CONF_ACTION_SAVE_ON_MATCHING, "SaveOnMatching", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_ACTION, CONF_ACTION_SAVE_ON_DETAILS, "SaveOnDetails", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_ACTION, CONF_ACTION_SAVE_ON_AUTOS, "SaveOnAutos", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_ACTION, CONF_ACTION_HIDE_ON_MINIZE, "HideOnMinize", VAR_TYPE_INTEGER );

	//////////////////////////////
	// SECTION :: GRAPHICS
	// :: object path
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_STYLE, "ObjPathLineStyle", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_COLOR, "ObjPathLineColor", VAR_TYPE_STRING );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_VERTEX, "ObjPathVertex", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_STARTEND, "ObjPathStartEnd", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_DIRECTION, "ObjPathDirection", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_BASELINE, "ObjPathBaseLine", VAR_TYPE_INTEGER );
	// :: sky grid
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_STYLE, "SkyGridLineStyle", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_COLOR, "SkyGridLineColor", VAR_TYPE_STRING );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_SHOW_LABELS, "SkyGridShowLabels", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_DRAW_SPLINES, "SkyGridDrawSplines", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_RA_DIVISIONS, "SkyGridRaDiv", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_DEC_DIVISIONS, "SkyGridDecDiv", VAR_TYPE_FLOAT );
	// :: distortion grid
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_STYLE, "DistGridLineStyle", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_COLOR, "DistGridLineColor", VAR_TYPE_STRING );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_DRAW_SPLINES, "DistGridDrawSplines", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_RA_DIVISIONS, "DistGridRaDiv", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_DEC_DIVISIONS, "DistGridDecDiv", VAR_TYPE_FLOAT );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_BUMP_FACTOR, "DistGridDecDiv", VAR_TYPE_FLOAT );
	// :: constellations
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_STYLE, "ConstlLineStyle", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_COLOR, "ConstlLineColor", VAR_TYPE_STRING );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_SHAPE_TYPE, "ConstlShapeType", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_MARK_STARS, "ConstlMarkStars", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_OUTLINE, "ConstlOutline", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_GREEK_LABELS, "ConstlGreekLabels", VAR_TYPE_INTEGER );

	//////////////////////////////
	// SECTION :: TOOLS :: SLIDESHOW
	AddVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_SOURCES, "Sources", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_ORDER, "Order", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_DELAY, "Delay", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_REPEAT, "Repeat", VAR_TYPE_INTEGER );
	AddVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_FULLSCREEN, "FullScreen", VAR_TYPE_INTEGER );

	// call init
	Init( );
	// do local inits
	InitApp();
	InitServices();
	InitGui();
	InitLocals( );
	InitStyles( );
	InitLocalSky( );
	InitLocalConstellations( );
	InitMatch( );
	InitTools( );
}

/////////////////////////////////////////////////////////////////////
// Method:	Destructor
// Class:	CConfigMain
// Purpose:	destroy/delete my object
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
CConfigMain::~CConfigMain( )
{
	// gather local vars
	UpdateGui( );
	UpdateLocalConstellations( );
	UpdateMatch( );
	UpdateTools( );
	UpdateApp( );

	// do save
	Save( );

	return;
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::InitApp( )
{
	int bChange = 1;

	m_strAppId = wxT("");
	m_strAppVer = wxT("");

	if( GetStrVar( SECTION_ID_APPLICATION, CONF_APPLICATION_ID, m_strAppId, 1 ) == 0 ) bChange = 1;
	if( GetStrVar( SECTION_ID_APPLICATION, CONF_APPLICATION_VER, m_strAppVer, 1 ) == 0 ) bChange = 1;

	// check if default updates then save config
	if( bChange > 0 ) Save( );
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::InitServices()
{
	int bChange = 1;

	m_strAppId = wxT("");
	m_strAppVer = wxT("");

	m_bEnableSoapServices = 0;
	m_strAppVer = wxT("127.0.0.1");
	m_nSoapServerPort = 11011;

	if( GetIntVar( SECTION_ID_SERVICES, CONF_SERVICES_SERVER_RUN, m_bEnableSoapServices, 1 ) == 0 ) bChange = 1;
	if( GetStrVar( SECTION_ID_SERVICES, CONF_SERVICES_SERVER_IP, m_strAppVer, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_SERVICES, CONF_SERVICES_SERVER_PORT, m_nSoapServerPort, 1 ) == 0 ) bChange = 1;

	// check if default updates then save config
	if( bChange > 0 ) Save( );
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateApp( )
{
	//////////////////////////////////
	SetStrVar( SECTION_ID_APPLICATION, CONF_APPLICATION_ID, m_strAppId );
	SetStrVar( SECTION_ID_APPLICATION, CONF_APPLICATION_VER, m_strAppVer );
}

/////////////////////////////////////////////////////////////////////
// Method:	InitGui
// Class:	CConfigMain
// Purpose:	init gui settings
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::InitGui( )
{
	int bChange = 1;
	int nVarInt=0;
	char strVar[255];

	// reset to zero some of the vars
	m_bShowImageThumbs = 0;
	m_bLogsView = 0;
	m_bViewImageAreas = 1;
	// set default group path
	m_strGroupPath = wxT( DEFAULT_GROUP_PATH );

	// SECTION :: GUI
	//////////////////////////////////

	/////////
	// init
	m_bHideOnMinimize = 0;
	m_bViewObjectsType = 0; // view custom, 1=all, 2=none
	m_nViewDetectedObjects = 50;
	m_bViewDetectedObjectsNoMatch = 1;
	m_nViewCatalogStars = 50;
	m_nViewCatalogDso = 50;
	m_nViewCatalogRadio = 50;
	m_nViewCatalogXGamma = 50;
	m_nViewCatalogSupernovas = 50;
	m_nViewCatalogBlackholes = 50;
	m_nViewCatalogMStars = 50;
	m_nViewCatalogExoplanets = 50;
	m_nViewCatalogAsteroids = 50;
	m_nViewCatalogComets = 10;
	m_nViewCatalogAes = 50;

	// VIEW :: all/none/custom
	if( GetIntVar( SECTION_ID_ACTION, CONF_ACTION_HIDE_ON_MINIZE, m_bHideOnMinimize, 1 ) == 0 ) bChange = 1;

	/////////////////////////
	// VIEW :: all/none/custom
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_OBJECTS_TYPE, m_bViewObjectsType, 1 ) == 0 ) bChange = 1;
	// VIEW :: detected not matched
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_DETECTED_OBJECTS_NO_MATCH, m_bViewDetectedObjectsNoMatch, 1 ) == 0 ) bChange = 1;

	// VIEW :: detected objects
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_DETECTED_OBJECTS, m_nViewDetectedObjects, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog stars
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_STARS, m_nViewCatalogStars, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog dso
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_DSO, m_nViewCatalogDso, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog radio
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_RADIO, m_nViewCatalogRadio, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog xgamma
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_XGAMMA, m_nViewCatalogXGamma, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog supernovas
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_SUPERNOVAS, m_nViewCatalogSupernovas, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog blackholes
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_BLACKHOLES, m_nViewCatalogBlackholes, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog mstars
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_MSTARS, m_nViewCatalogMStars, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog exoplanets
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_EXOPLANETS, m_nViewCatalogExoplanets, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog asteroids
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_ASTERIODS, m_nViewCatalogAsteroids, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog comets
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_COMETS, m_nViewCatalogComets, 1 ) == 0 ) bChange = 1;
	// VIEW :: catalog aes
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_AES, m_nViewCatalogAes, 1 ) == 0 ) bChange = 1;

	///////////
	// width
	if( GetIntVar( SECTION_ID_GUI, CONF_GUI_WIDTH, m_nGuiFrameWidth, 1 ) == 0 ) bChange = 1;
	// height
	if( GetIntVar( SECTION_ID_GUI, CONF_GUI_HEIGHT, m_nGuiFrameHeight, 1 ) == 0 ) bChange = 1;
	// logs
	if( GetIntVar( SECTION_ID_GUI, CONF_LOGS_VIEW, m_bLogsView, 1 ) == 0 ) bChange = 1;
	// image areas
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_IMAGE_AREAS, m_bViewImageAreas, 1 ) == 0 ) bChange = 1;
	// thumbnails
	if( GetIntVar( SECTION_ID_GUI, CONF_VIEW_GROUP_IMAGE_THUMBNAILS, m_bShowImageThumbs, 1 ) == 0 ) bChange = 1;

	// last image added path
	if( GetStrVar( SECTION_ID_GUI, CONF_ADD_FILE_PATH, strVar ) == 0 )
	{
		sprintf( strVar, "%s", DEFAULT_GROUP_PATH );
		SetStrVar( SECTION_ID_GUI, CONF_ADD_FILE_PATH, strVar );
		m_strGroupPath = wxString(strVar,wxConvUTF8);
		bChange = 1;

	} else
	{
		m_strGroupPath = wxString(strVar,wxConvUTF8);
	}

	// check if default updates then save config
	if( bChange > 0 ) Save( );

}

/////////////////////////////////////////////////////////////////////
// Method:	UpdateGui
// Class:	CConfigMain
// Purpose:	update gui settings
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateGui( )
{
	SetIntVar( SECTION_ID_ACTION, CONF_ACTION_HIDE_ON_MINIZE, m_bHideOnMinimize );

	SetIntVar( SECTION_ID_GUI, CONF_VIEW_OBJECTS_TYPE, m_bViewObjectsType );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_DETECTED_OBJECTS, m_nViewDetectedObjects );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_DETECTED_OBJECTS_NO_MATCH, m_bViewDetectedObjectsNoMatch );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_STARS, m_nViewCatalogStars );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_DSO, m_nViewCatalogDso );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_XGAMMA, m_nViewCatalogXGamma );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_RADIO, m_nViewCatalogRadio );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_MSTARS, m_nViewCatalogMStars );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_SUPERNOVAS, m_nViewCatalogSupernovas );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_BLACKHOLES, m_nViewCatalogBlackholes );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_EXOPLANETS, m_nViewCatalogExoplanets );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_ASTERIODS, m_nViewCatalogAsteroids );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_COMETS, m_nViewCatalogComets );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_CATALOG_AES, m_nViewCatalogAes );

	// other
	SetIntVar( SECTION_ID_GUI, CONF_LOGS_VIEW, m_bLogsView );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_IMAGE_AREAS, m_bViewImageAreas );
	SetIntVar( SECTION_ID_GUI, CONF_VIEW_GROUP_IMAGE_THUMBNAILS, m_bShowImageThumbs );

	return;
}

/////////////////////////////////////////////////////////////////////
// Method:	InitLocalConstellations
// Class:	CConfigMain
// Purpose:	init local contellations
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::InitLocalConstellations( )
{
	int bChange = 1;
	m_bShowConstellations = 1;
	m_nConstellationCulture = 0;
	m_nConstellationVersion = 0;
	m_bConstellationLines = 0;
	m_bConstellationLabel = 0;
	m_bConstellationArtwork = 0;

	if( GetIntVar( SECTION_ID_GUI, CONF_CONSTL_VIEW, m_bShowConstellations, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GUI, CONF_CONSTL_CULTURE, m_nConstellationCulture, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GUI, CONF_CONSTL_VERSION, m_nConstellationVersion, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GUI, CONF_CONSTL_LINES, m_bConstellationLines, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GUI, CONF_CONSTL_LABEL, m_bConstellationLabel, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GUI, CONF_CONSTL_ARTWORK, m_bConstellationArtwork, 1 ) == 0 ) bChange = 1;
}

/////////////////////////////////////////////////////////////////////
// Method:	UpdateLocalConstellations
// Class:	CConfigMain
// Purpose:	update local contellations variables
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateLocalConstellations( )
{
	SetIntVar( SECTION_ID_GUI, CONF_CONSTL_VIEW, m_bShowConstellations );
	SetIntVar( SECTION_ID_GUI, CONF_CONSTL_CULTURE, m_nConstellationCulture );
	SetIntVar( SECTION_ID_GUI, CONF_CONSTL_VERSION, m_nConstellationVersion );
	SetIntVar( SECTION_ID_GUI, CONF_CONSTL_LINES, m_bConstellationLines );
	SetIntVar( SECTION_ID_GUI, CONF_CONSTL_LABEL, m_bConstellationLabel );
	SetIntVar( SECTION_ID_GUI, CONF_CONSTL_ARTWORK, m_bConstellationArtwork );
}

/////////////////////////////////////////////////////////////////////
// Method:	InitLocals
// Class:	CConfigMain
// Purpose:	init local variables
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::InitLocals( )
{
	int bChange = 0;

	//////////////////////
	// reset flags 
	m_nSkyCoordDisplayFormat = UNITS_FORMAT_SEXAGESIMAL;
	m_nSkyCoordEntryFormat = UNITS_FORMAT_DECIMAL;
	m_nGuiLanguage = 0;
	m_nGuiTheme = 0;

	// :: detected
	m_bDetectObjLabelUseId=0;
	m_bDetectObjLabelUseMag=0;
	// :: catalog
	m_bCatStarLabelUseId=0;
	m_bCatStarLabelUseCatNo=0;
	m_bCatStarLabelUseCName=0;
	// :: matched
	m_bMatchObjLabelUseId=0; 
	m_bMatchObjLabelUseCatNo=0;
	m_bMatchObjLabelUseCName=0; 
	// :: nebula
//	m_bNebObjLabelUseId=0;
	m_bNebObjLabelUseCatNo=0; 
	m_bNebObjLabelUseCName=0;
	m_bNebObjLabelUseType=0;
	// :: cluster
	m_bCluObjLabelUseCatNo=0; 
	m_bCluObjLabelUseCName=0;
	m_bCluObjLabelUseType=0;
	// :: galaxy
	m_bGalObjLabelUseCatNo=0; 
	m_bGalObjLabelUseCName=0;
	m_bGalObjLabelUseType=0;
	// :: supernovae
	m_bSNObjLabelUseCatNo=0; 
	m_bSNObjLabelUseCName=0;
	m_bSNObjLabelUseType=0;
	// :: black holes
	m_bBHObjLabelUseCatNo=0; 
	m_bBHObjLabelUseType=0;
	// :: radio
	m_bRadObjLabelUseCatNo=0; 
	m_bRadObjLabelUseType=0;
	// :: x-ray
	m_bXRayObjLabelUseCatNo=0; 
	m_bXRayObjLabelUseType=0;
	// :: gamma
	m_bGammaObjLabelUseCatNo=0; 
	m_bGammaObjLabelUseType=0;
	// :: multiple/double stars
	m_bMSObjLabelUseCatNo=0; 
	m_bMSObjLabelUseType=0;
	// :: asteroids
	m_bASTObjLabelUseCatNo=0; 
	m_bASTObjLabelUseType=0;
	// :: comets
	m_bCOMObjLabelUseCatNo=0; 
	m_bCOMObjLabelUseType=0;
	// :: extrasolar planets
	m_bEXPObjLabelUseCatNo=0; 
	m_bEXPObjLabelUseType=0;
	// :: artificial eart satellites
	m_bAESObjLabelUseCatNo=0; 
	m_bAESObjLabelUseType=0;

	/////////////////////////
	// default fonts and colors shapes and lines
	// :: detected
	m_nDetectObjShapeType = 0;
	m_nDetectObjShapeLine = 0;
	fontDObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorDObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: matched
	m_nMatchObjShapeType = 0;
	m_nMatchObjShapeLine = 0;
	fontMObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorMObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: catalog
	m_nCatObjShapeType = 0;
	m_nCatObjShapeLine = 0;
	fontCObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorCObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: nebula
	m_nNebObjShapeType = 0;
	m_nNebObjShapeLine = 0;
	fontNebObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorNebObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: cluster
	m_nCluObjShapeType = 0;
	m_nCluObjShapeLine = 0;
	fontCluObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorCluObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: galaxy
	m_nGalObjShapeType = 0;
	m_nGalObjShapeLine = 0;
	fontGalObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorGalObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: supernovae
	m_nSNObjShapeType = 0;
	m_nSNObjShapeLine = 0;
	fontSNObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorSNObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: blackholes
	m_nBHObjShapeType = 0;
	m_nBHObjShapeLine = 0;
	fontBHObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorBHObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: radio
	m_nRadObjShapeType = 0;
	m_nRadObjShapeLine = 0;
	fontRadObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorRadObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: xray
	m_nXRayObjShapeType = 0;
	m_nXRayObjShapeLine = 0;
	fontXRayObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorXRayObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: gamma
	m_nGammaObjShapeType = 0;
	m_nGammaObjShapeLine = 0;
	fontGammaObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorGammaObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: multiple/double stars
	m_nMSObjShapeType = 0;
	m_nMSObjShapeLine = 0;
	fontMSObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorMSObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: asteroids
	m_nASTObjShapeType = 0;
	m_nASTObjShapeLine = 0;
	fontASTObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorASTObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: comets
	m_nCOMObjShapeType = 0;
	m_nCOMObjShapeLine = 0;
	fontCOMObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorCOMObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: extrasolar planets
	m_nEXPObjShapeType = 0;
	m_nEXPObjShapeLine = 0;
	fontEXPObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorEXPObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	// :: artificial eart satellites
	m_nAESObjShapeType = 0;
	m_nAESObjShapeLine = 0;
	fontAESObjLabel = wxSystemSettings::GetFont( wxSYS_DEFAULT_GUI_FONT );
	colorAESObjLabel = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );

	/////////////////////////////
	// SECTION :: GRAPHICS DEFAULTS
	// :: dynamic object path 
	m_nGraphicsObjectPathLine = GRAPHICS_LINE_STYLE_NORMAL;
	colGraphicsObjectPath = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	m_nObjsPathShapeType = DYNAMIC_OBJ_PATH_SHAPE_TYPE_SPLINE_CATMULLROM;
	m_bGraphicsPathVertex = 1;
	m_bGraphicsPathStartEnd = 1;
	m_bGraphicsPathDirection = 0;
	m_bGraphicsPathBaseLines = 0;
	// :: sky grid
	m_nGraphicsSkyGridLine = GRAPHICS_LINE_STYLE_NORMAL;
	colGraphicsSkyGrid = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	m_bSkyGridShowLabels = 0;
	m_bSkyGridDrawSplines = 0;
	m_nSkyGridRaDivValue = 20.0;
	m_nSkyGridDecDivValue = 15.0;
	// :: distortion grid
	m_nGraphicsDistortionGridLine = GRAPHICS_LINE_STYLE_NORMAL;
	colGraphicsDistortionGrid = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	m_bDistGridDrawSplines = 0;
	m_nDistGridRaDivValue = 20.0;
	m_nDistGridDecDivValue = 20.0;
	m_nDistGridBumpFactValue = 10.0;
	// :: constellations
	m_nGraphicsConstellationLinesLine = GRAPHICS_LINE_STYLE_NORMAL;
	colGraphicsConstellationLines = wxSystemSettings::GetColour( wxSYS_COLOUR_WINDOWTEXT );
	m_bConstellationMarkStars = 0;
	m_bConstellationOutLine = 0;
	m_bConstellationGreekLabels = 0;

	// SECTION :: STYLE - LABEL STRUCTURE 
	////////////////////////////////////////
	// get detected object use id
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_ID, m_bDetectObjLabelUseId ) == 0 )
	{
		m_bDetectObjLabelUseId = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_ID, m_bDetectObjLabelUseId );
		bChange = 1;
	} 
	// get detected object use mag
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_MAG, m_bDetectObjLabelUseMag ) == 0 )
	{
		m_bDetectObjLabelUseMag = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_MAG, m_bDetectObjLabelUseMag );
		bChange = 1;
	} 
	///////
	// get matched object use id
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_ID, m_bMatchObjLabelUseId ) == 0 )
	{
		m_bMatchObjLabelUseId = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_ID, m_bMatchObjLabelUseId );
		bChange = 1;
	} 
	// get matched object use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CATNO, m_bMatchObjLabelUseCatNo ) == 0 )
	{
		m_bMatchObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CATNO, m_bMatchObjLabelUseCatNo );
		bChange = 1;
	} 
	// get matched object use common name
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CNAME, m_bMatchObjLabelUseCName ) == 0 )
	{
		m_bMatchObjLabelUseCName = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CNAME, m_bMatchObjLabelUseCName );
		bChange = 1;
	} 
	///////
	// get CATALOG STARS object use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CATNO, m_bCatStarLabelUseCatNo ) == 0 )
	{
		m_bCatStarLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CATNO, m_bCatStarLabelUseCatNo );
		bChange = 1;
	} 
	// get catalog object use common name
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CNAME, m_bCatStarLabelUseCName ) == 0 )
	{
		m_bCatStarLabelUseCName = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CNAME, m_bCatStarLabelUseCName );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Nebula -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CATNO, m_bNebObjLabelUseCatNo ) == 0 )
	{
		m_bNebObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CATNO, m_bNebObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use common name
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CNAME, m_bNebObjLabelUseCName ) == 0 )
	{
		m_bNebObjLabelUseCName = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CNAME, m_bNebObjLabelUseCName );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_TYPE, m_bNebObjLabelUseType ) == 0 )
	{
		m_bNebObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_TYPE, m_bNebObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Cluster -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CATNO, m_bCluObjLabelUseCatNo ) == 0 )
	{
		m_bCluObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CATNO, m_bCluObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use common name
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CNAME, m_bCluObjLabelUseCName ) == 0 )
	{
		m_bCluObjLabelUseCName = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CNAME, m_bCluObjLabelUseCName );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_TYPE, m_bCluObjLabelUseType ) == 0 )
	{
		m_bCluObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_TYPE, m_bCluObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Galaxy -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CATNO, m_bGalObjLabelUseCatNo ) == 0 )
	{
		m_bGalObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CATNO, m_bGalObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use common name
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CNAME, m_bGalObjLabelUseCName ) == 0 )
	{
		m_bGalObjLabelUseCName = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CNAME, m_bGalObjLabelUseCName );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_TYPE, m_bGalObjLabelUseType ) == 0 )
	{
		m_bGalObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_TYPE, m_bGalObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Supernovae -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CATNO, m_bSNObjLabelUseCatNo ) == 0 )
	{
		m_bSNObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CATNO, m_bSNObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use common name
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CNAME, m_bSNObjLabelUseCName ) == 0 )
	{
		m_bSNObjLabelUseCName = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CNAME, m_bSNObjLabelUseCName );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_TYPE, m_bSNObjLabelUseType ) == 0 )
	{
		m_bSNObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_TYPE, m_bSNObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Radio -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_CATNO, m_bRadObjLabelUseCatNo ) == 0 )
	{
		m_bRadObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_CATNO, m_bRadObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_TYPE, m_bRadObjLabelUseType ) == 0 )
	{
		m_bRadObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_TYPE, m_bRadObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: XRay -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_CATNO, m_bXRayObjLabelUseCatNo ) == 0 )
	{
		m_bXRayObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_CATNO, m_bXRayObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_TYPE, m_bXRayObjLabelUseType ) == 0 )
	{
		m_bXRayObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_TYPE, m_bXRayObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Gamma -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_CATNO, m_bGammaObjLabelUseCatNo ) == 0 )
	{
		m_bGammaObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_CATNO, m_bGammaObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_TYPE, m_bGammaObjLabelUseType ) == 0 )
	{
		m_bGammaObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_TYPE, m_bGammaObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: Black Holes -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_CATNO, m_bBHObjLabelUseCatNo ) == 0 )
	{
		m_bBHObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_CATNO, m_bBHObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_TYPE, m_bBHObjLabelUseType ) == 0 )
	{
		m_bBHObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_TYPE, m_bBHObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: multiple/double stars -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_CATNO, m_bMSObjLabelUseCatNo ) == 0 )
	{
		m_bMSObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_CATNO, m_bMSObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_TYPE, m_bMSObjLabelUseType ) == 0 )
	{
		m_bMSObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_TYPE, m_bMSObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: asteroids -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_CATNO, m_bASTObjLabelUseCatNo ) == 0 )
	{
		m_bASTObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_CATNO, m_bASTObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_TYPE, m_bASTObjLabelUseType ) == 0 )
	{
		m_bASTObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_TYPE, m_bASTObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// ::  comets -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_CATNO, m_bCOMObjLabelUseCatNo ) == 0 )
	{
		m_bCOMObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_CATNO, m_bCOMObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_TYPE, m_bCOMObjLabelUseType ) == 0 )
	{
		m_bCOMObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_TYPE, m_bCOMObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: extrasolar planets -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_CATNO, m_bEXPObjLabelUseCatNo ) == 0 )
	{
		m_bEXPObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_CATNO, m_bEXPObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_TYPE, m_bEXPObjLabelUseType ) == 0 )
	{
		m_bEXPObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_TYPE, m_bEXPObjLabelUseType );
		bChange = 1;
	} 
	////////////////////////////////
	// :: artificial eart satellites -  use cat no
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_CATNO, m_bAESObjLabelUseCatNo ) == 0 )
	{
		m_bAESObjLabelUseCatNo = 1;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_CATNO, m_bAESObjLabelUseCatNo );
		bChange = 1;
	} 
	// :: get object use object type
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_TYPE, m_bAESObjLabelUseType ) == 0 )
	{
		m_bAESObjLabelUseType = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_TYPE, m_bAESObjLabelUseType );
		bChange = 1;
	} 

	// check if default updates then save config
	if( bChange > 0 ) Save( );

	return;
}

/////////////////////////////////////////////////////////////////////
// Method:	InitStyles
// Class:	CConfigMain
// Purpose:	init style variables
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::InitStyles( )
{
	int bChange = 0;
	int nVarInt = 0;
	double nVarDouble = 0.0;
	char strVar[255];

	// SECTION :: STYLE
	//////////////////////////////////
	// font encoding
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_FONT_ENCODING, nVarInt ) == 0 )
	{
		// just get the first one as a sample of encoding
		nVarInt = (int) fontDObjLabel.GetDefaultEncoding();
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_FONT_ENCODING, nVarInt );
		bChange = 1;
	} else
	{
		fontDObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontMObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontCObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontNebObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontCluObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontGalObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontSNObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontBHObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontRadObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontXRayObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontGammaObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontMSObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontASTObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontCOMObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontEXPObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
		fontAESObjLabel.SetDefaultEncoding( (wxFontEncoding) nVarInt );
	}
	/////////////////////
	// :: font description - detected
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontDObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontDObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// :: font color - detected
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorDObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorDObjLabel.Set( strFontCol );
	}
	//////////
	// :: font description - matched
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontMObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontMObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - matched
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorMObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorMObjLabel.Set( strFontCol );
	}
	//////////
	// :: font description - catalog object
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontCObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontCObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// :: font color - catalog object
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorCObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorCObjLabel.Set( strFontCol );
	}
	//////////
	// font description - Nebula
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontNebObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontNebObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Nebula
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorNebObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorNebObjLabel.Set( strFontCol );
	}
	//////////
	// font description - Cluster
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontCluObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontCluObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Cluster
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorCluObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorCluObjLabel.Set( strFontCol );
	}
	//////////
	// font description - Galaxy
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontGalObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontGalObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Galaxy
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorGalObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorGalObjLabel.Set( strFontCol );
	}
	//////////
	// font description - Supernovae
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontSNObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontSNObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Supernovae
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorSNObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorSNObjLabel.Set( strFontCol );
	}
	//////////
	// font description - radio
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontRadObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontRadObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Radio
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorRadObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorRadObjLabel.Set( strFontCol );
	}
	//////////
	// font description - xray
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontXRayObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontXRayObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Supernovae
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorXRayObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorXRayObjLabel.Set( strFontCol );
	}
	//////////
	// font description - gamma
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontGammaObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontGammaObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - gamma
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorGammaObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorGammaObjLabel.Set( strFontCol );
	}
	//////////
	// font description - black holes
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontBHObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontBHObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - black holes
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorBHObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorBHObjLabel.Set( strFontCol );
	}
	//////////
	// font description - multiple/double stars
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontMSObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontMSObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - multiple/double stars
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorMSObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorMSObjLabel.Set( strFontCol );
	}
	//////////
	// font description - extra-solar planets
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontEXPObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontEXPObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - extra-solar planets
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorEXPObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorEXPObjLabel.Set( strFontCol );
	}
	//////////
	// font description - Asteroids
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontASTObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontASTObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - asteroids
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorASTObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorASTObjLabel.Set( strFontCol );
	}
	//////////
	// font description - comets
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontCOMObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontCOMObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - comets
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorCOMObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorCOMObjLabel.Set( strFontCol );
	}
	//////////
	// font description - Artificial earth satellites
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_DESC, strVar ) == 0 )
	{
		wxString strFontDesc = fontAESObjLabel.GetNativeFontInfoDesc();
		strcpy( strVar, strFontDesc.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_DESC, strVar );
		bChange = 1;
	} else
	{
		fontAESObjLabel.SetNativeFontInfo( wxString(strVar,wxConvUTF8) );
	}
	// font color - Artificial earth satellites
	if( GetStrVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_COLOR, strVar ) == 0 )
	{
		wxString strFontCol = colorAESObjLabel.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strFontCol.ToAscii() );
		SetStrVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strFontCol = wxString(strVar,wxConvUTF8);
		colorAESObjLabel.Set( strFontCol );
	}

	// STYLE - SHAPES & LINES
	/////////////////////////////////
	// :: detected
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_SHAPE_TYPE, m_nDetectObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_SHAPE_LINE, m_nDetectObjShapeLine );
	// :: matched
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_SHAPE_TYPE, m_nMatchObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_SHAPE_LINE, m_nMatchObjShapeLine );
	// :: catalog
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_SHAPE_TYPE, m_nCatObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_SHAPE_LINE, m_nCatObjShapeLine );
	// :: nebula
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_SHAPE_TYPE, m_nNebObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_SHAPE_LINE, m_nNebObjShapeLine );
	// :: cluster
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_SHAPE_TYPE, m_nCluObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_SHAPE_LINE, m_nCluObjShapeLine );
	// :: galaxy
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_SHAPE_TYPE, m_nGalObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_SHAPE_LINE, m_nGalObjShapeLine );
	// :: supernovae
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_SHAPE_TYPE, m_nSNObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_SHAPE_LINE, m_nSNObjShapeLine );
	// :: radio
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_SHAPE_TYPE, m_nRadObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_SHAPE_LINE, m_nRadObjShapeLine );
	// :: xray
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_SHAPE_TYPE, m_nXRayObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_SHAPE_LINE, m_nXRayObjShapeLine );
	// :: gamma
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_SHAPE_TYPE, m_nGammaObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_SHAPE_LINE, m_nGammaObjShapeLine );
	// :: black holes
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_SHAPE_TYPE, m_nBHObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_SHAPE_LINE, m_nBHObjShapeLine );
	// :: multiple/double stars
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_SHAPE_TYPE, m_nMSObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_SHAPE_LINE, m_nMSObjShapeLine );
	// :: extra-solar planets
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_SHAPE_TYPE, m_nEXPObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_SHAPE_LINE, m_nEXPObjShapeLine );
	// :: asteroids
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_SHAPE_TYPE, m_nASTObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_SHAPE_LINE, m_nASTObjShapeLine );
	// :: comets
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_SHAPE_TYPE, m_nCOMObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_SHAPE_LINE, m_nCOMObjShapeLine );
	// :: asrtificial eart satellites
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_SHAPE_TYPE, m_nAESObjShapeType );
	GetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_SHAPE_LINE, m_nAESObjShapeLine );


	// SECTION :: GRAPHICS
	////////////////////////////////////////////////////////
	// :: object path - line color
	if( GetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_COLOR, strVar ) == 0 )
	{
		wxString strLineCol = colGraphicsObjectPath.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strLineCol.ToAscii() );
		SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strLineCol = wxString(strVar,wxConvUTF8);
		colGraphicsObjectPath.Set( strLineCol );
	}
	// :: object path - line style, vertex, start-end, direction, base line
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_STYLE, m_nGraphicsObjectPathLine, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_VERTEX, m_bGraphicsPathVertex, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_STARTEND, m_bGraphicsPathStartEnd, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_DIRECTION, m_bGraphicsPathDirection, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_BASELINE, m_bGraphicsPathBaseLines, 1 ) == 0 ) bChange = 1;
	// :: sky grid - line color
	if( GetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_COLOR, strVar ) == 0 )
	{
		wxString strLineCol = colGraphicsSkyGrid.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strLineCol.ToAscii() );
		SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strLineCol = wxString(strVar,wxConvUTF8);
		colGraphicsSkyGrid.Set( strLineCol );
	}
	// :: sky grid - line style, labels, splines, ra/dec divisions
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_STYLE, m_nGraphicsSkyGridLine, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_SHOW_LABELS, m_bSkyGridShowLabels, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_DRAW_SPLINES, m_bSkyGridDrawSplines, 1 ) == 0 ) bChange = 1;
	if( GetDoubleVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_RA_DIVISIONS, m_nSkyGridRaDivValue, 1 ) == 0 ) bChange = 1;
	if( GetDoubleVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_DEC_DIVISIONS, m_nSkyGridDecDivValue, 1 ) == 0 ) bChange = 1;
	// :: distortion grid - line color
	if( GetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_COLOR, strVar ) == 0 )
	{
		wxString strLineCol = colGraphicsDistortionGrid.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strLineCol.ToAscii() );
		SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strLineCol = wxString(strVar,wxConvUTF8);
		colGraphicsDistortionGrid.Set( strLineCol );
	}
	// :: distortion grid - line style, splines, ra/dec divisions
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_STYLE, m_nGraphicsDistortionGridLine, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_DRAW_SPLINES, m_bDistGridDrawSplines, 1 ) == 0 ) bChange = 1;
	if( GetDoubleVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_RA_DIVISIONS, m_nDistGridRaDivValue, 1 ) == 0 ) bChange = 1;
	if( GetDoubleVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_DEC_DIVISIONS, m_nDistGridDecDivValue, 1 ) == 0 ) bChange = 1;
	if( GetDoubleVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_BUMP_FACTOR, m_nDistGridBumpFactValue, 1 ) == 0 ) bChange = 1;
	// :: constellations - line color
	if( GetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_COLOR, strVar ) == 0 )
	{
		wxString strLineCol = colGraphicsConstellationLines.GetAsString( wxC2S_CSS_SYNTAX );
		strcpy( strVar, strLineCol.ToAscii() );
		SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_COLOR, strVar );
		bChange = 1;
	} else
	{
		wxString strLineCol = wxString(strVar,wxConvUTF8);
		colGraphicsConstellationLines.Set( strLineCol );
	}
	// :: constellations - line style,
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_STYLE, m_nGraphicsConstellationLinesLine, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_MARK_STARS, m_bConstellationMarkStars, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_OUTLINE, m_bConstellationOutLine, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_GREEK_LABELS, m_bConstellationGreekLabels, 1 ) == 0 ) bChange = 1;

	// SECTION :: STYLE - UNITS AND COORDINATE SYSTEM
	/////////////////////////////
	// sky coord display format
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_DISPLAY_FORMAT, m_nSkyCoordDisplayFormat ) == 0 )
	{
		m_nSkyCoordDisplayFormat = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_DISPLAY_FORMAT, m_nSkyCoordDisplayFormat );
		bChange = 1;
	}

	/////////////////////////////
	// sky coord entry format
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_ENTRY_FORMAT, m_nSkyCoordEntryFormat ) == 0 )
	{
		m_nSkyCoordEntryFormat = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_ENTRY_FORMAT, m_nSkyCoordEntryFormat );
		bChange = 1;
	}

	/////////
	// coordinate system
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_COORD_SYSTEM, m_nCoordSystem ) == 0 )
	{
		m_nCoordSystem = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COORD_SYSTEM, m_nCoordSystem );
		bChange = 1;
	} 
	/////////
	// GUI Language
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GUI_LANGUAGE, m_nGuiLanguage ) == 0 )
	{
		m_nGuiLanguage = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GUI_LANGUAGE, m_nGuiLanguage );
		bChange = 1;
	} 
	/////////
	// GUI Theme
	if( GetIntVar( SECTION_ID_STYLE, CONF_STYLE_GUI_THEME, m_nGuiTheme ) == 0 )
	{
		m_nGuiTheme = 0;
		SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GUI_THEME, m_nGuiTheme );
		bChange = 1;
	} 

	if( bChange > 0 ) Save( );
}

/////////////////////////////////////////////////////////////////////
// Method:	UpdateStyles
// Class:	CConfigMain
// Purpose:	update style variables
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateStyles( )
{
	char strVar[255];

	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_FONT_ENCODING, (int) fontDObjLabel.GetDefaultEncoding() );
	// :: now here we set the config - detect obj
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_SHAPE_TYPE, m_nDetectObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_SHAPE_LINE, m_nDetectObjShapeLine );
	strcpy( strVar, fontDObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_DESC, strVar );
	strcpy( strVar, colorDObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_DFONT_COLOR, strVar );
	// :: matched obj
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_SHAPE_TYPE, m_nMatchObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_SHAPE_LINE, m_nMatchObjShapeLine );
	strcpy( strVar, fontMObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_DESC, strVar );
	strcpy( strVar, colorMObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MFONT_COLOR, strVar );
	// :: catalog obj
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_SHAPE_TYPE, m_nCatObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_SHAPE_LINE, m_nCatObjShapeLine );
	strcpy( strVar, fontCObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_DESC, strVar );
	strcpy( strVar, colorCObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CFONT_COLOR, strVar );
	// nebula obj
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_SHAPE_TYPE, m_nNebObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_SHAPE_LINE, m_nNebObjShapeLine );
	strcpy( strVar, fontNebObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_DESC, strVar );
	strcpy( strVar, colorNebObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_NEBFONT_COLOR, strVar );
	// cluster obj
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_SHAPE_TYPE, m_nCluObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_SHAPE_LINE, m_nCluObjShapeLine );
	strcpy( strVar, fontCluObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_DESC, strVar );
	strcpy( strVar, colorCluObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_CLUFONT_COLOR, strVar );
	// galaxy obj
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_SHAPE_TYPE, m_nGalObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_SHAPE_LINE, m_nGalObjShapeLine );
	strcpy( strVar, fontGalObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_DESC, strVar );
	strcpy( strVar, colorGalObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GALFONT_COLOR, strVar );
	// supernovae
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_SHAPE_TYPE, m_nSNObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_SHAPE_LINE, m_nSNObjShapeLine );
	strcpy( strVar, fontSNObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_DESC, strVar );
	strcpy( strVar, colorSNObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_SNFONT_COLOR, strVar );
	// radio
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_SHAPE_TYPE, m_nRadObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_SHAPE_LINE, m_nRadObjShapeLine );
	strcpy( strVar, fontRadObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_DESC, strVar );
	strcpy( strVar, colorRadObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_RADFONT_COLOR, strVar );
	// xray
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_SHAPE_TYPE, m_nXRayObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_SHAPE_LINE, m_nXRayObjShapeLine );
	strcpy( strVar, fontXRayObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_DESC, strVar );
	strcpy( strVar, colorXRayObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_XRAYFONT_COLOR, strVar );
	// gamma
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_SHAPE_TYPE, m_nGammaObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_SHAPE_LINE, m_nGammaObjShapeLine );
	strcpy( strVar, fontGammaObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_DESC, strVar );
	strcpy( strVar, colorGammaObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAFONT_COLOR, strVar );
	// black holes
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_SHAPE_TYPE, m_nBHObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_SHAPE_LINE, m_nBHObjShapeLine );
	strcpy( strVar, fontBHObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_DESC, strVar );
	strcpy( strVar, colorBHObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_BHFONT_COLOR, strVar );
	// :: multiple/double stars
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_SHAPE_TYPE, m_nMSObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_SHAPE_LINE, m_nMSObjShapeLine );
	strcpy( strVar, fontMSObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_DESC, strVar );
	strcpy( strVar, colorMSObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_MSFONT_COLOR, strVar );
	// :: asteroids
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_SHAPE_TYPE, m_nASTObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_SHAPE_LINE, m_nASTObjShapeLine );
	strcpy( strVar, fontASTObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_DESC, strVar );
	strcpy( strVar, colorASTObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_ASTFONT_COLOR, strVar );
	// :: comets
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_SHAPE_TYPE, m_nCOMObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_SHAPE_LINE, m_nCOMObjShapeLine );
	strcpy( strVar, fontCOMObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_DESC, strVar );
	strcpy( strVar, colorCOMObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_COMFONT_COLOR, strVar );
	// :: extrasolar planets
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_SHAPE_TYPE, m_nEXPObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_SHAPE_LINE, m_nEXPObjShapeLine );
	strcpy( strVar, fontEXPObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_DESC, strVar );
	strcpy( strVar, colorEXPObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_EXPFONT_COLOR, strVar );
	// :: artificial eart satellites
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_SHAPE_TYPE, m_nAESObjShapeType );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_SHAPE_LINE, m_nAESObjShapeLine );
	strcpy( strVar, fontAESObjLabel.GetNativeFontInfoDesc().ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_DESC, strVar );
	strcpy( strVar, colorAESObjLabel.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_STYLE, CONF_STYLE_AESFONT_COLOR, strVar );

	////////////////////
	// here we set the label structure
	// :: detected
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_ID, m_bDetectObjLabelUseId );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_DOBJ_USE_MAG, m_bDetectObjLabelUseMag );
	// :: matched
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_ID, m_bMatchObjLabelUseId );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CATNO, m_bMatchObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MOBJ_USE_CNAME, m_bMatchObjLabelUseCName );
	// :: catalog stars
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CATNO, m_bCatStarLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COBJ_USE_CNAME, m_bCatStarLabelUseCName );
	// :: nebula
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CATNO, m_bNebObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_CNAME, m_bNebObjLabelUseCName );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_NEBOBJ_USE_TYPE, m_bNebObjLabelUseType );
	// :: cluster
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CATNO, m_bCluObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_CNAME, m_bCluObjLabelUseCName );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_CLUOBJ_USE_TYPE, m_bCluObjLabelUseType );
	// :: galaxy
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CATNO, m_bGalObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_CNAME, m_bGalObjLabelUseCName );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GALOBJ_USE_TYPE, m_bGalObjLabelUseType );
	// :: supernovae
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CATNO, m_bSNObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_CNAME, m_bSNObjLabelUseCName );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SNOBJ_USE_TYPE, m_bSNObjLabelUseType );
	// :: radio
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_CATNO, m_bRadObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_RADOBJ_USE_TYPE, m_bRadObjLabelUseType );
	// :: xray
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_CATNO, m_bXRayObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_XRAYOBJ_USE_TYPE, m_bXRayObjLabelUseType );
	// :: gamma
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_CATNO, m_bGammaObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GAMMAOBJ_USE_TYPE, m_bGammaObjLabelUseType );
	// :: black holes
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_CATNO, m_bBHObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_BHOBJ_USE_TYPE, m_bBHObjLabelUseType );
	// :: multiple/double stars
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_CATNO, m_bMSObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_MSOBJ_USE_TYPE, m_bMSObjLabelUseType );
	// :: asteroids
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_CATNO, m_bASTObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_ASTOBJ_USE_TYPE, m_bASTObjLabelUseType );
	// :: comets 
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_CATNO, m_bCOMObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COMOBJ_USE_TYPE, m_bCOMObjLabelUseType );
	// :: extrasolar planets
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_CATNO, m_bEXPObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_EXPOBJ_USE_TYPE, m_bEXPObjLabelUseType );
	// :: artificial eart satellites
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_CATNO, m_bAESObjLabelUseCatNo );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_AESOBJ_USE_TYPE, m_bAESObjLabelUseType );


	//////////////////////////////////
	// SECTION :: GRAPHICS
	// :: object path
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_STYLE, m_nGraphicsObjectPathLine );
	strcpy( strVar, colGraphicsObjectPath.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_LINE_COLOR, strVar );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_VERTEX, m_bGraphicsPathVertex );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_STARTEND, m_bGraphicsPathStartEnd );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_DIRECTION, m_bGraphicsPathDirection );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_OBJPATH_BASELINE, m_bGraphicsPathBaseLines );
	// :: sky grid
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_STYLE, m_nGraphicsSkyGridLine );
	strcpy( strVar, colGraphicsSkyGrid.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_LINE_COLOR, strVar );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_SHOW_LABELS, m_bSkyGridShowLabels );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_DRAW_SPLINES, m_bSkyGridDrawSplines );
	SetFloatVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_RA_DIVISIONS, m_nSkyGridRaDivValue );
	SetFloatVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_SKYGRID_DEC_DIVISIONS, m_nSkyGridDecDivValue );
	// :: distortion grid
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_STYLE, m_nGraphicsDistortionGridLine );
	strcpy( strVar, colGraphicsDistortionGrid.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_LINE_COLOR, strVar );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_DRAW_SPLINES, m_bDistGridDrawSplines );
	SetFloatVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_RA_DIVISIONS, m_nDistGridRaDivValue );
	SetFloatVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_DEC_DIVISIONS, m_nDistGridDecDivValue );
	SetFloatVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_DISTGRID_BUMP_FACTOR, m_nDistGridBumpFactValue );
	// :: constellations
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_STYLE, m_nGraphicsConstellationLinesLine );
	strcpy( strVar, colGraphicsConstellationLines.GetAsString( wxC2S_CSS_SYNTAX ).ToAscii() );
	SetStrVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_LINE_COLOR, strVar );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_MARK_STARS, m_bConstellationMarkStars );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_OUTLINE, m_bConstellationOutLine );
	SetIntVar( SECTION_ID_GRAHIPCS, CONF_GRAHIPCS_CONSTL_GREEK_LABELS, m_bConstellationGreekLabels );

	///////////////////////////////
	// SECTION :: units format and coordinate system
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_DISPLAY_FORMAT, m_nSkyCoordDisplayFormat );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_SKY_COORD_ENTRY_FORMAT, m_nSkyCoordEntryFormat );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_COORD_SYSTEM, m_nCoordSystem );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GUI_LANGUAGE, m_nGuiLanguage );
	SetIntVar( SECTION_ID_STYLE, CONF_STYLE_GUI_THEME, m_nGuiTheme );
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::GetStarStyle( int nMatch, int nType, wxColour &colDraw, wxFont &fontDraw, int &nLineType, int &nShapeType )
{
	// get catalog star font//color shape/line etc
	if( nMatch == 1 )
	{
		colDraw = this->colorMObjLabel;
		fontDraw = this->fontMObjLabel;
		nShapeType = this->m_nMatchObjShapeType;
		nLineType = this->m_nMatchObjShapeLine;

	} else if( nMatch == 2 )
	{
		colDraw = this->colorMObjLabel;
		fontDraw = this->fontMObjLabel;
		nShapeType = this->m_nMatchObjShapeType;
		nLineType = this->m_nMatchObjShapeLine;
		// process for matched by method/step two 
		unsigned char nRed = colDraw.Red();
		unsigned char nGreen = colDraw.Green();
		unsigned char nBlue = colDraw.Blue();
		unsigned char nLessCol = 50;
		// adjust color nuamnce
		if( nRed-nLessCol > 0 ) 
			nRed -= 125;
		else
			nRed = nLessCol;
		if( nGreen-nLessCol > 0 ) 
			nGreen -= nLessCol;
		else
			nGreen = nLessCol;
		if( nBlue-nLessCol > 0 ) 
			nBlue -= nLessCol;
		else
			nBlue = nLessCol;
		// set color nuance
		colDraw.Set( nRed, nGreen, nBlue );

	} else
	{
		colDraw = this->colorDObjLabel;
		fontDraw = this->fontDObjLabel;
		nShapeType = this->m_nDetectObjShapeType;
		nLineType = this->m_nDetectObjShapeLine;
		// process for detected type
		unsigned char nRed = colDraw.Red();
		unsigned char nGreen = colDraw.Green();
		unsigned char nBlue = colDraw.Blue();
		unsigned char nLessCol = 50;
		// by detetcted type like a star or galaxy
		if( nType != SKY_OBJECT_TYPE_LIKE_A_STAR )
		{
			// down garde nuance for objects not like a star class
			if( nRed-nLessCol > 0 ) 
				nRed -= 125;
			else
				nRed = nLessCol;
			if( nGreen-nLessCol > 0 ) 
				nGreen -= nLessCol;
			else
				nGreen = nLessCol;
			if( nBlue-nLessCol > 0 ) 
				nBlue -= nLessCol;
			else
				nBlue = nLessCol;
			// set color nuance
			colDraw.Set( nRed, nGreen, nBlue );
		}
	}
}

/////////////////////////////////////////////////////////////////////
// Method:	InitLocalSky
// Class:	CConfigMain
// Purpose:	init local variables
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::InitLocalSky( )
{
	int nVarInt=0, bChange=0;
	double nVarFloat = 0;

	// init vars with defaults
	m_nCatalogForMatching = CATALOG_ID_USNO_B1;
	m_bStarsCatLoadLocalRegion = DEFAULT_CATALOG_USE_REGION;
	m_nStarsCatMaxMagLimit = DEFAULT_CATALOG_MAX_MAG_LIMIT;
	m_bStarsCatLoadRemote = 0;
	m_nStarsCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////////////////////
	// CONFIG :: catalog section
	// get catalog id
	if( GetIntVar( SECTION_ID_CATALOG, CONF_STARS_CATALOG_TO_USE, m_nCatalogForMatching, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REGION, m_bStarsCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get max mag limit
	if( GetDoubleVar( SECTION_ID_CATALOG, CONF_STARS_CATALOG_MAG_LIMIT, m_nStarsCatMaxMagLimit, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REMOTE, m_bStarsCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// get load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REMOTE_LOCATION, m_nStarsCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init 
	m_nDsoCatalogToUse = CATALOG_ID_NONE;
	m_bDsoCatLoadLocalRegion = 0;
	m_bDsoCatLoadRemote = 0;
	m_nDsoCatLoadRemoteLocation = 0;
	m_bUseMessier = 1;
	m_bUseNgc = DEFAULT_CATALOG_USE_NGC;
	m_bUseIc = DEFAULT_CATALOG_USE_IC;

	//////////////////////////////////////////////
	// :: DSO CATALOGS
	// get what dso catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_TO_USE, m_nDsoCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REGION, m_bDsoCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REMOTE, m_bDsoCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REMOTE_LOCATION, m_nDsoCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;
	// get if to use messier catalog
	if( GetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_MESSIER, m_bUseMessier, 1 ) == 0 ) bChange = 1;
	// get if to use ngc catalog
	if( GetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_NGC, m_bUseNgc, 1 ) == 0 ) bChange = 1;
	// get if to use IC catalog
	if( GetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_IC, m_bUseIc, 1 ) == 0 ) bChange = 1;

	// init
	m_nRadioCatalogToUse = CATALOG_ID_NONE;
	m_bRadioCatLoadLocalRegion = 0;
	m_bRadioCatLoadRemote = 0;
	m_nRadioCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: RADIO CATALOGS
	// get what dso catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_RADIO_CATALOG_TO_USE, m_nRadioCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REGION, m_bRadioCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REMOTE, m_bRadioCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REMOTE_LOCATION, m_nRadioCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init 
	m_nXGammaCatalogToUse = CATALOG_ID_NONE;
	m_bXGammaCatLoadLocalRegion = 0;
	m_bXGammaCatLoadRemote = 0;
	m_nXGammaCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: X-RAY/GAMMA CATALOGS
	// get what catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_XGAMMA_CATALOG_TO_USE, m_nXGammaCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REGION, m_bXGammaCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REMOTE, m_bXGammaCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REMOTE_LOCATION, m_nXGammaCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init 
	m_nSNCatalogToUse = CATALOG_ID_NONE;
	m_bSNCatLoadLocalRegion = 0;
	m_bSNCatLoadRemote = 0;
	m_nSNCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: SUPERNOVAS CATALOGS
	// get what dso catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_SN_CATALOG_TO_USE, m_nSNCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REGION, m_bSNCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REMOTE, m_bSNCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REMOTE_LOCATION, m_nSNCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init
	m_nBHCatalogToUse = CATALOG_ID_NONE;
	m_bBHCatLoadLocalRegion = 0;
	m_bBHCatLoadRemote = 0;
	m_nBHCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: BLACKHOLES CATALOGS
	// get what dso catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_BH_CATALOG_TO_USE, m_nBHCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REGION, m_bBHCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REMOTE, m_bBHCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REMOTE_LOCATION, m_nBHCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init
	m_nMSCatalogToUse = CATALOG_ID_NONE;
	m_bMSCatLoadLocalRegion = 0;
	m_bMSCatLoadRemote = 0;
	m_nMSCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: MULTIPLE/DOUBLE CATALOGS
	// get what dso catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_MS_CATALOG_TO_USE, m_nMSCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REGION, m_bMSCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REMOTE, m_bMSCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REMOTE_LOCATION, m_nMSCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init 
	m_nEXPCatalogToUse = CATALOG_ID_NONE;
	m_bEXPCatLoadLocalRegion = 0;
	m_bEXPCatLoadRemote = 0;
	m_nEXPCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: EXO-PLANETS
	// get what dso catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_EXP_CATALOG_TO_USE, m_nEXPCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REGION, m_bEXPCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REMOTE, m_bEXPCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REMOTE_LOCATION, m_nEXPCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init
	m_nASTCatalogToUse = CATALOG_ID_NONE;
	m_bASTCatLoadLocalRegion = 0;
	m_bASTCatLoadRemote = 0;
	m_nASTCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: ASTEROIDS
	// get what asteroids catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_AST_CATALOG_TO_USE, m_nASTCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REGION, m_bASTCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REMOTE, m_bASTCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REMOTE_LOCATION, m_nASTCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init
	m_nCOMCatalogToUse = CATALOG_ID_NONE;
	m_bCOMCatLoadLocalRegion = 0;
	m_bCOMCatLoadRemote = 0;
	m_nCOMCatLoadRemoteLocation = 0;

	//////////////////////////////////////////////
	// :: COMETS
	// get what comets catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_COM_CATALOG_TO_USE, m_nCOMCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REGION, m_bCOMCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REMOTE, m_bCOMCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REMOTE_LOCATION, m_nCOMCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;

	// init
	m_nAESCatalogToUse = CATALOG_ID_NONE;
	m_bAESCatLoadTimeFrame = 0;
	m_bAESCatLoadLocalRegion = 0;
	m_bAESCatLoadRemote = 0;
	m_nAESCatLoadRemoteLocation = 0;
	m_bAESCatRemoteUpdateLocal = 0;
	m_nAESCatObjCat = 0;
	m_nAESCatObjType = 0;
	m_bAESCatDontUseType = 0;
	m_bAESCatRecUseDateStart = 0;
	m_nAESCatRecDateStart = 2415020.5;
	m_bAESCatRecUseDateEnd = 0;
	//wxDateTime mytime;
	m_nAESCatRecDateEnd = wxDateTime::Now().GetJDN();

	//////////////////////////////////////////////
	// :: ARTIFICIAL EARTH SATELLITES
	// get what catalog to use
	if( GetIntVar( SECTION_ID_CATALOG, CONF_AES_CATALOG_TO_USE, m_nAESCatalogToUse, 1 ) == 0 ) bChange = 1;
	// get if to use time frame
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_TIMEFRAME, m_bAESCatLoadTimeFrame, 1 ) == 0 ) bChange = 1;
	// get if to use region
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REGION, m_bAESCatLoadLocalRegion, 1 ) == 0 ) bChange = 1;
	// get if to load remote
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE, m_bAESCatLoadRemote, 1 ) == 0 ) bChange = 1;
	// load remote location
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE_LOCATION, m_nAESCatLoadRemoteLocation, 1 ) == 0 ) bChange = 1;
	// new :: load remote and update local
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE_UPDATE_LOCAL, m_bAESCatRemoteUpdateLocal, 1 ) == 0 ) bChange = 1;
	// FILTER :: satellite category
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_OBJ_CATEGORY, m_nAESCatObjCat, 1 ) == 0 ) bChange = 1;
	// FILTER :: object type
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_OBJ_TYPE, m_nAESCatObjType, 1 ) == 0 ) bChange = 1;
	// FILTER :: don't use obj type
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DONT_USE_TYPE, m_bAESCatDontUseType, 1 ) == 0 ) bChange = 1;
	// FILTER :: use start date
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_DATE_START, m_bAESCatRecUseDateStart, 1 ) == 0 ) bChange = 1;
	// FILTER :: start date
	if( GetDoubleVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DATE_START, m_nAESCatRecDateStart, 1 ) == 0 ) bChange = 1;
	// FILTER :: use end date
	if( GetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_DATE_END, m_bAESCatRecUseDateEnd, 1 ) == 0 ) bChange = 1;
	// FILTER :: end date
	if( GetDoubleVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DATE_END, m_nAESCatRecDateEnd, 1 ) == 0 ) bChange = 1;

	// check if default updates then save config
	if( bChange > 0 ) Save( );

	return;
}

/////////////////////////////////////////////////////////////////////
// Method:	UpdateLocalSky
// Class:	CConfigMain
// Purpose:	update local sky variables
// Input:	nothing
// Output:	nothing
/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateLocalSky( )
{
	/////////////////
	// CATALOGS
	// :: stars
	SetIntVar( SECTION_ID_CATALOG, CONF_STARS_CATALOG_TO_USE, m_nCatalogForMatching );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REGION, m_bStarsCatLoadLocalRegion );
	SetFloatVar( SECTION_ID_CATALOG, CONF_STARS_CATALOG_MAG_LIMIT, m_nStarsCatMaxMagLimit );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REMOTE, m_bStarsCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_STARS_CATALOG_REMOTE_LOCATION, m_nStarsCatLoadRemoteLocation );
	// :: dso
	SetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_TO_USE, m_nDsoCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REGION, m_bDsoCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REMOTE, m_bDsoCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_DSO_CATALOG_REMOTE_LOCATION, m_nDsoCatLoadRemoteLocation );
	SetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_MESSIER, m_bUseMessier );
	SetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_NGC, m_bUseNgc );
	SetIntVar( SECTION_ID_CATALOG, CONF_DSO_CATALOG_IC, m_bUseIc );
	// :: radio
	SetIntVar( SECTION_ID_CATALOG, CONF_RADIO_CATALOG_TO_USE, m_nRadioCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REGION, m_bRadioCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REMOTE, m_bRadioCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_RADIO_CATALOG_REMOTE_LOCATION, m_nRadioCatLoadRemoteLocation );
	// :: x-ray/gamma
	SetIntVar( SECTION_ID_CATALOG, CONF_XGAMMA_CATALOG_TO_USE, m_nXGammaCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REGION, m_bXGammaCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REMOTE, m_bXGammaCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_XGAMMA_CATALOG_REMOTE_LOCATION, m_nXGammaCatLoadRemoteLocation );
	// :: supernovas
	SetIntVar( SECTION_ID_CATALOG, CONF_SN_CATALOG_TO_USE, m_nSNCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REGION, m_bSNCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REMOTE, m_bSNCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_SN_CATALOG_REMOTE_LOCATION, m_nSNCatLoadRemoteLocation );
	// :: blackholes
	SetIntVar( SECTION_ID_CATALOG, CONF_BH_CATALOG_TO_USE, m_nBHCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REGION, m_bBHCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REMOTE, m_bBHCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_BH_CATALOG_REMOTE_LOCATION, m_nBHCatLoadRemoteLocation );
	// :: multiple/double stars
	SetIntVar( SECTION_ID_CATALOG, CONF_MS_CATALOG_TO_USE, m_nMSCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REGION, m_bMSCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REMOTE, m_bMSCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_MS_CATALOG_REMOTE_LOCATION, m_nMSCatLoadRemoteLocation );
	// :: exo-planets
	SetIntVar( SECTION_ID_CATALOG, CONF_EXP_CATALOG_TO_USE, m_nEXPCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REGION, m_bEXPCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REMOTE, m_bEXPCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_EXP_CATALOG_REMOTE_LOCATION, m_nEXPCatLoadRemoteLocation );
	// :: asteroids
	SetIntVar( SECTION_ID_CATALOG, CONF_AST_CATALOG_TO_USE, m_nASTCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REGION, m_bASTCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REMOTE, m_bASTCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AST_CATALOG_REMOTE_LOCATION, m_nASTCatLoadRemoteLocation );
	// :: comets
	SetIntVar( SECTION_ID_CATALOG, CONF_COM_CATALOG_TO_USE, m_nCOMCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REGION, m_bCOMCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REMOTE, m_bCOMCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_COM_CATALOG_REMOTE_LOCATION, m_nCOMCatLoadRemoteLocation );
	// :: artificial earth satellites
	SetIntVar( SECTION_ID_CATALOG, CONF_AES_CATALOG_TO_USE, m_nAESCatalogToUse );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_TIMEFRAME, m_bAESCatLoadTimeFrame );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REGION, m_bAESCatLoadLocalRegion );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE, m_bAESCatLoadRemote );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE_LOCATION, m_nAESCatLoadRemoteLocation );
	// - newish
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_REMOTE_UPDATE_LOCAL, m_bAESCatRemoteUpdateLocal );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_OBJ_CATEGORY, m_nAESCatObjCat );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_OBJ_TYPE, m_nAESCatObjType );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DONT_USE_TYPE, m_bAESCatDontUseType );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_DATE_START, m_bAESCatRecUseDateStart );
	SetFloatVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DATE_START, m_nAESCatRecDateStart );
	SetIntVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_USE_DATE_END, m_bAESCatRecUseDateEnd );
	SetFloatVar( SECTION_ID_CATALOG, CONF_LOAD_AES_CATALOG_DATE_END, m_nAESCatRecDateEnd );
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateMatch( )
{
	/////////////////
	// matching params
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_METHOD, m_nSkySearchMethod );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_RA, m_nSearchAreaIncrementOnRA );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_DEC, m_nSearchAreaIncrementOnDEC );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_RA, m_nRaSearchOverlapDivision );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_DEC, m_nDecSearchOverlapDivision );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_STEPS, m_nSearchZoomSteps );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_START, m_nSearchZoomStart );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_REVERSE_ZOOM_SEARCH, m_bDoReverseZoomSearch );
	// :: proc
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_PROJECTION_METHOD, m_nSkyProjectionMethod );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE_WITH_PRJ, m_bDoMatchFineTuneWithProjection );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_MOST_STARS, m_bMatchCheckByNoOfStars );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_BEST_FIT, m_bMatchCheckByBestFit );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_REFINE_BEST_AREA, m_bDoMatchRefineBestArea );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_STOP_ON_FIRST_FOUND, m_bMatchStopWhenMinIsFound );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MIN_FOUND_NEEDED, m_nMatchMinFoundToStop );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_HALT_SIGMA, m_nAssocMatchMaxDist );
	// :: OBJECTS
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_OBJ_SHAPE, m_nImgObjectExtractByObjShape );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_DETECT_TYPE, m_nImgObjectExtractByDetectType );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_NO, m_nScanMatchImgObjNo );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_CAT_OBJ_NO, m_nScanMatchCatObjNo );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_USE_MIN_CAT_STARS, m_nSearchMatchMinCatStars );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_MIN_STARS, m_nMatchFirstLevelMinStars );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_IMAGE_STARS_FACT, m_nMatchFineTuneImgStarsFactor );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_CATALOG_STARS_FACT, m_nMatchFineTuneCatStarsFactor );
	// :: MATCH
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_TRANS_TYPE, m_nMatchTransType );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_RECALC, m_bMatchDoRecalc );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_DIST, m_nMatchMaxDist );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_FIT, m_nMatchTriangFit );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_SCALE, m_nMatchTriangScale );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_ITER, m_nMatchMaxIter );
	SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_HALT_SIGMA, m_nMatchHaltSigma );
	// :: MATCH :: FINDER
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_CAT_STARS, m_bMatchLocateCatStars );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_DSO, m_bMatchLocateDso );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_XGAMMA, m_bMatchLocateXGamma );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_RADIO, m_bMatchLocateRadio );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_SN, m_bMatchLocateSupernovas );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_BH, m_bMatchLocateBlackholes );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_MSTARS, m_bMatchLocateMStars );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_EXOPLANETS, m_bMatchLocateExoplanets );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_ASTEROIDS, m_bMatchLocateAsteroids );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_COMETS, m_bMatchLocateComets );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_AES, m_bMatchLocateAes );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_SOLAR, m_bMatchLocateSolar );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_FETCH_OBJ_DETAILS_ON_FIND, m_bMatchFetchDetails );
	// :: MATCH :: FINDER
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TIMEFRAME_RANGE, m_nMatchLocateTimeFrameRange );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TIMEFRAME_DIV, m_nMatchLocateTimeFrameDivision );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_USE_TLE_IN_RANGE, m_bOnlyTleInRange );
	SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TLE_RANGE_VALUE, m_nTleInRangeValue );

	return;
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::InitMatch( )
{
	int nVarInt=0;
	double nVarFloat=0.0;

	//////////////////////////////////////////////////////////////
	// CONFIG :: from Matching section :: SEARCH
	////////////////////////////////////////////////////////////////
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_METHOD, nVarInt ) == 0 )
	{
		m_nSkySearchMethod = 0;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_METHOD, m_nSkySearchMethod );
	} else
	{
		m_nSkySearchMethod = nVarInt;
	}
	// search area increment on RA
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_RA, nVarFloat ) == 0 )
	{
		m_nSearchAreaIncrementOnRA = DEFAULT_SEARCH_AREA_INCREMENT_ON_RA;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_RA, m_nSearchAreaIncrementOnRA );

	} else
	{
		m_nSearchAreaIncrementOnRA = nVarFloat;
	}
	// search area increment on DEC
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_DEC, nVarFloat ) == 0 )
	{
		m_nSearchAreaIncrementOnDEC = DEFAULT_SEARCH_AREA_INCREMENT_ON_DEC;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_AREA_INCREMENT_RA, m_nSearchAreaIncrementOnDEC );

	} else
	{
		m_nSearchAreaIncrementOnDEC = nVarFloat;
	}
	// search area overlap division on RA
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_RA, nVarInt ) == 0 )
	{
		m_nRaSearchOverlapDivision = DEFAULT_SEARCH_MATCH_OVERLAP_DIVISION_RA;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_RA, m_nRaSearchOverlapDivision );

	} else
	{
		m_nRaSearchOverlapDivision = nVarInt;
	}
	// search area overlap division on DEC
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_DEC, nVarInt ) == 0 )
	{
		m_nDecSearchOverlapDivision = DEFAULT_SEARCH_MATCH_OVERLAP_DIVISION_DEC;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_OVERLAP_DIV_DEC, m_nDecSearchOverlapDivision );

	} else
	{
		m_nDecSearchOverlapDivision = nVarInt;
	}
	// search area zoom steps
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_STEPS, nVarInt ) == 0 )
	{
		m_nSearchZoomSteps = DEFAULT_SEARCH_MATCH_NO_OF_ZOOM_STEPS;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_STEPS, m_nSearchZoomSteps );

	} else
	{
		m_nSearchZoomSteps = nVarInt;
	}
	// search area zoom start
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_START, nVarInt ) == 0 )
	{
		m_nSearchZoomStart = DEFAULT_SEARCH_MATCH_ZOOM_LEVEL_START;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_SEARCH_ZOOM_START, m_nSearchZoomStart );

	} else
	{
		m_nSearchZoomStart = nVarInt;
	}
	// DoReverseZoomSearch
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_REVERSE_ZOOM_SEARCH, nVarInt ) == 0 )
	{
		m_bDoReverseZoomSearch = 0;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_REVERSE_ZOOM_SEARCH, m_bDoReverseZoomSearch );

	} else
	{
		m_bDoReverseZoomSearch = nVarInt;
	}

	//////////////////////////////////////////////////////////////
	// CONFIG :: from Matching section :: PROC
	// projection method
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_PROJECTION_METHOD, nVarInt ) == 0 )
	{
		m_nSkyProjectionMethod = SKY_TO_IMAGE_PROJECTION_METHOD_GNOMONIC;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_PROJECTION_METHOD, m_nSkyProjectionMethod );

	} else
	{
		m_nSkyProjectionMethod = nVarInt;
	}
	// DoMatchFineTune
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE, nVarInt ) == 0 )
	{
		m_bDoMatchFineTune = 1;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE, m_bDoMatchFineTune );

	} else
	{
		m_bDoMatchFineTune = nVarInt;
	}
	// DoMatchFineTuneWithProjection
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE_WITH_PRJ, nVarInt ) == 0 )
	{
		m_bDoMatchFineTuneWithProjection = 1;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_DO_FINETUNE_WITH_PRJ, m_bDoMatchFineTuneWithProjection );

	} else
	{
		m_bDoMatchFineTuneWithProjection = nVarInt;
	}
	// MatchByMostStars
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_MOST_STARS, nVarInt ) == 0 )
	{
		m_bMatchCheckByNoOfStars = 1;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_MOST_STARS, m_bMatchCheckByNoOfStars );

	} else
	{
		m_bMatchCheckByNoOfStars = nVarInt;
	}
	// MatchByBestFit
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_BEST_FIT, nVarInt ) == 0 )
	{
		m_bMatchCheckByBestFit = 1;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_BY_BEST_FIT, m_bMatchCheckByBestFit );

	} else
	{
		m_bMatchCheckByBestFit = nVarInt;
	}
	// DoMatchRefineBestArea
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_REFINE_BEST_AREA, nVarInt ) == 0 )
	{
		m_bDoMatchRefineBestArea = 0;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_REFINE_BEST_AREA, m_bDoMatchRefineBestArea );

	} else
	{
		m_bDoMatchRefineBestArea = nVarInt;
	}
	// DoMatchStopOnFirstFound
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_STOP_ON_FIRST_FOUND, nVarInt ) == 0 )
	{
		m_bMatchStopWhenMinIsFound = 0;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_STOP_ON_FIRST_FOUND, m_bMatchStopWhenMinIsFound );
	} else
	{
		m_bMatchStopWhenMinIsFound = nVarInt;
	}
	// MatchStopOnMinFound
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MIN_FOUND_NEEDED, nVarInt ) == 0 )
	{
		m_nMatchMinFoundToStop = DEFAULT_MATCH_STOP_ON_FIRST_FOUND_MIN_NEEDED;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MIN_FOUND_NEEDED, m_nMatchMinFoundToStop );

	} else
	{
		m_nMatchMinFoundToStop = nVarInt;
	}
	// AssocMatchMaxDist
	if( GetDoubleVar( SECTION_ID_MATCHING, DEFAULT_MATCH_ASSOC_MAX_DISTANCE, nVarFloat ) == 0 )
	{
		m_nAssocMatchMaxDist = DEFAULT_MATCH_ASSOC_MAX_DISTANCE;
		SetIntVar( SECTION_ID_MATCHING, DEFAULT_MATCH_ASSOC_MAX_DISTANCE, m_nAssocMatchMaxDist );

	} else
	{
		m_nAssocMatchMaxDist = nVarInt;
	}

	////////////////////////////////////////////////////////////////
	// CONFIG :: from Matching section :: OBJECTS
	// object extraction by object shape
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_OBJ_SHAPE, nVarInt ) == 0 )
	{
		m_nImgObjectExtractByObjShape = 1;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_OBJ_SHAPE, m_nImgObjectExtractByObjShape );

	} else
	{
		m_nImgObjectExtractByObjShape = nVarInt;
	}
	// object extraction by detection type
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_DETECT_TYPE, nVarInt ) == 0 )
	{
		m_nImgObjectExtractByDetectType = 0;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_EXTRACT_BY_DETECT_TYPE, m_nImgObjectExtractByDetectType );

	} else
	{
		m_nImgObjectExtractByDetectType = nVarInt;
	}
	// get number of objects in the image to use for scan matching
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_NO, nVarInt ) == 0 )
	{
		m_nScanMatchImgObjNo = DEFAULT_IMG_SCAN_MATCH_OBJ_NO;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_IMG_OBJ_NO, m_nScanMatchImgObjNo );
	} else
	{
		m_nScanMatchImgObjNo = nVarInt;
	}
	// get number of objects in the catalog to use for scan matching
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_CAT_OBJ_NO, nVarInt ) == 0 )
	{
		m_nScanMatchCatObjNo = DEFAULT_CAT_SCAN_MATCH_OBJ_NO;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_CAT_OBJ_NO, m_nScanMatchCatObjNo );
	} else
	{
		m_nScanMatchCatObjNo = nVarInt;
	}
	// minimum catalog stars to use
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_USE_MIN_CAT_STARS, nVarInt ) == 0 )
	{
		m_nSearchMatchMinCatStars = DEFAULT_SEARCH_MATCH_MIN_CATALOG_STARS;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_USE_MIN_CAT_STARS, m_nSearchMatchMinCatStars );

	} else
	{
		m_nSearchMatchMinCatStars = nVarInt;
	}
	// minimum matched stars needed
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_MIN_STARS, nVarInt ) == 0 )
	{
		m_nMatchFirstLevelMinStars = DEFAULT_SEARCH_MATCH_FIRST_LEVEL_MIN_STARS;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MATCH_MIN_STARS, m_nMatchFirstLevelMinStars );

	} else
	{
		m_nMatchFirstLevelMinStars = nVarInt;
	}
	// finetune image stars factor
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_IMAGE_STARS_FACT, nVarFloat ) == 0 )
	{
		m_nMatchFineTuneImgStarsFactor = DEFAULT_MATCH_FINETUNE_IMG_STARS_NO_FACTOR;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_IMAGE_STARS_FACT, m_nMatchFineTuneImgStarsFactor );

	} else
	{
		m_nMatchFineTuneImgStarsFactor = nVarFloat;
	}
	// finetune catalog stars factor
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_CATALOG_STARS_FACT, nVarFloat ) == 0 )
	{
		m_nMatchFineTuneCatStarsFactor = DEFAULT_MATCH_FINETUNE_CAT_STARS_NO_FACTOR;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_FINETUNE_CATALOG_STARS_FACT, m_nMatchFineTuneCatStarsFactor );

	} else
	{
		m_nMatchFineTuneCatStarsFactor = nVarFloat;
	}

	//////////////////////////////////////////////////////////////
	// CONFIG :: from matching section
	// get transaction type
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_TRANS_TYPE, nVarInt ) == 0 )
	{
		m_nMatchTransType = AT_TRANS_LINEAR;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_TRANS_TYPE, m_nMatchTransType );
	} else 
	{
		m_nMatchTransType = nVarInt;
	}
	// get if to recalculate
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_RECALC, nVarInt ) == 0 )
	{
		m_bMatchDoRecalc = 0;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_RECALC, m_bMatchDoRecalc );
	} else 
	{
		m_bMatchDoRecalc = nVarInt;
	}
	// get max distance
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_DIST, nVarFloat ) == 0 )
	{
		m_nMatchMaxDist = AT_MATCH_RADIUS;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_DIST, m_nMatchMaxDist );
	} else 
	{
		m_nMatchMaxDist = nVarFloat;
	}
	// triangle fit distance
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_FIT, nVarFloat ) == 0 )
	{
		m_nMatchTriangFit = AT_TRIANGLE_RADIUS;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_FIT, m_nMatchTriangFit );
	} else 
	{
		m_nMatchTriangFit = nVarFloat;
	}
	// triangle scale
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_SCALE, nVarFloat ) == 0 )
	{
		m_nMatchTriangScale = -1.0;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_TRIANG_SCALE, m_nMatchTriangScale );
	} else 
	{
		m_nMatchTriangScale = nVarFloat;
	}
	// max iterations
	if( GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_ITER, nVarInt ) == 0 )
	{
		m_nMatchMaxIter = AT_MATCH_MAXITER;
		SetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_MAX_ITER, m_nMatchMaxIter );
	} else 
	{
		m_nMatchMaxIter = nVarInt;
	}
	// halt sigma
	if( GetDoubleVar( SECTION_ID_MATCHING, CONF_MATCHING_HALT_SIGMA, nVarFloat ) == 0 )
	{
		m_nMatchHaltSigma = AT_MATCH_HALTSIGMA_CPP;
		SetFloatVar( SECTION_ID_MATCHING, CONF_MATCHING_HALT_SIGMA, m_nMatchHaltSigma );
	} else 
	{
		m_nMatchHaltSigma = nVarFloat;
	}

	m_bMatchLocateCatStars = 0;
	m_bMatchLocateDso = 0;
	m_bMatchLocateXGamma = 0;
	m_bMatchLocateRadio = 0;
	m_bMatchLocateSupernovas = 0;
	m_bMatchLocateBlackholes = 0;
	m_bMatchLocateMStars = 0;
	m_bMatchLocateExoplanets = 0;
	m_bMatchLocateAsteroids = 0;
	m_bMatchLocateComets = 0;
	m_bMatchLocateAes = 0;
	m_bMatchLocateSolar = 0;
	m_bMatchFetchDetails = 0;
	m_nMatchLocateTimeFrameRange = 0;
	m_nMatchLocateTimeFrameDivision = 0;
	m_bOnlyTleInRange = 0;
	m_nTleInRangeValue = 0;

	//////////////////////////////////////////////////////////////
	// CONFIG :: MATCH :: FINDER
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_CAT_STARS, m_bMatchLocateCatStars, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_DSO, m_bMatchLocateDso, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_XGAMMA, m_bMatchLocateXGamma, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_RADIO, m_bMatchLocateRadio, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_SN, m_bMatchLocateSupernovas, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_BH, m_bMatchLocateBlackholes, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_MSTARS, m_bMatchLocateMStars, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_EXOPLANETS, m_bMatchLocateExoplanets, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_ASTEROIDS, m_bMatchLocateAsteroids, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_COMETS, m_bMatchLocateComets, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_AES, m_bMatchLocateAes, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_SOLAR, m_bMatchLocateSolar, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_FETCH_OBJ_DETAILS_ON_FIND, m_bMatchFetchDetails, 1 );

	//////////////////////////////////////////////////////////////
	// CONFIG :: MATCH :: SOLAR
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TIMEFRAME_RANGE, m_nMatchLocateTimeFrameRange, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TIMEFRAME_DIV, m_nMatchLocateTimeFrameDivision, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_USE_TLE_IN_RANGE, m_bOnlyTleInRange, 1 );
	GetIntVar( SECTION_ID_MATCHING, CONF_MATCHING_LOCATE_TLE_RANGE_VALUE, m_nTleInRangeValue, 1 );

	//if( bChange > 0 ) Save( );

	return;
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::InitTools( )
{
	int bChange=0;
	// init
	m_nSlideShowSources = 0;
	m_nSlideShowOrder = 0;
	m_nSlideShowDelay = 5;
	m_nSlideShowRepeat = 0;
	m_nSlideShowFullScreen = 0;

	// SECTION :: SLIDESHOW
	//////////////////////////////////
	if( GetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_SOURCES, m_nSlideShowSources, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_ORDER, m_nSlideShowOrder, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_DELAY, m_nSlideShowDelay, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_REPEAT, m_nSlideShowRepeat, 1 ) == 0 ) bChange = 1;
	if( GetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_FULLSCREEN, m_nSlideShowFullScreen, 1 ) == 0 ) bChange = 1;

	// check if default updates then save config
	if( bChange > 0 ) Save( );
}

/////////////////////////////////////////////////////////////////////
void CConfigMain::UpdateTools( )
{
	// SECTION :: SLIDESHOW
	//////////////////////////////////
	SetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_SOURCES, m_nSlideShowSources );
	SetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_ORDER, m_nSlideShowOrder );
	SetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_DELAY, m_nSlideShowDelay );
	SetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_REPEAT, m_nSlideShowRepeat );
	SetIntVar( SECTION_ID_SLIDESHOW, CONF_SLIDESHOW_FULLSCREEN, m_nSlideShowFullScreen );
}